/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define('vendor/js.cookie',factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

define('lang',['vendor/js.cookie'],function(Cookies) {
    'use strict';
    var lang_cookie = "";
    const LANGUAGE_KEY = 'django_language';
    const DEFAULT_LANGUAGE = "fr";
    var DEFAULT_PATH = {path: ""};
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
    }

    function get_lang(){
      const current_lang = $('#current-lang').val();
      return current_lang;
    }
    function change_language(element){
        var form = $('#lang-form');
        var $el = $(element);
        if($el.hasClass('active')||$el.hasClass('selected')){
            return;
        }
        var name = $('input[name="language"]', form);
        lang_cookie = $el.data('value');
        name.val(lang_cookie);
        //Cookies.set(LANGUAGE_KEY, lang_cookie, DEFAULT_PATH);
        form.submit();
    }
    $('.js-lang').on('click', function(event){
        change_language(this);
    });
    return {get_cookie: getCookie, get_lang: get_lang}
});
define('ajax_api',['lang'], function(Locale) {
    'use strict';
    /**
       * 
       * @param {*} options is a JSON defining the following data :
       * type - string
       * url - string
       * data - json
       * dataType - string
       * Example : 
       * type: 'POST',
         url : '/cart/add_to_cart/',
        data: {product_id: 102, quantity: 4},
        dataType: 'json'
  
        A future object is returned
    */

      function ajax_lang(options, debug){
        if(debug){
          console.debug("ajax_api options - ", options);
        }
        options.url = '/' + Locale.get_lang() + options.url;
        return new Promise(function(resolve, reject){
            $.ajax(options).done(resolve).fail(reject);
        });
      };

      function ajax(options,display_loader){
        if(display_loader === undefined || display_loader){
          options.beforeSend = function(xhr, status){
            let loader = document.getElementById('loader');
            loader.style.display = "block";
          };
          options.complete = function(xhr, status){
            let loader = document.getElementById('loader');
            loader.style.display = "none";
          };
        }
        
        return new Promise(function(resolve, reject){
            $.ajax(options).done(resolve).fail(reject);
        });
      };

      async function fetch_api(url='', init_option={}){
        const response = await fetch(url, init_option);
        return response.json();
      }

    return {'ajax_lang':ajax_lang, 'ajax' : ajax, 'fetch_api': fetch_api};
  });

define('tag_api',[], function() {
    'use strict';
    var element_factory = {
        create_tag : function(option){
            let element = document.createElement(option.element);
            if(!option.hasOwnProperty('options')){
                return element;
            }
            let options = option.options;
            for(const [key, value] of Object.entries(options)){
                if((key == 'cls') && value.length){
                    value.split(' ').forEach(cls =>{
                        element.classList.add(cls);
                    });
                }else if(key == 'children'){
                    value.forEach(child =>{
                        element.appendChild(child);
                    });
                    
                }else if(key == 'child'){
                    element.appendChild(value);
                }else if(key.startsWith('data-')){
                    element.setAttribute(key, value);
                }else{
                    element[key] = value;
                }
            }
            return element;
        }
    };
    return element_factory;
    
});

define('filters',['tag_api'],function(tag_api) {
    'use strict';
    let filter_instance;

    function clean_form_before_submit(form){
        let filter_inputs = $('.filter-input', form);
        filter_inputs.each(function(){
            this.disabled = this.value == "";
        });
        $('.no-submit', form).each(function(){
            this.disabled = true;
        });
        let valid_inputs = filter_inputs.filter(function(){
            return this.value != "";
        });
        return valid_inputs.length == 0;
    }
    
    function filter_singular_init(field_id, chips_class){
        let input = document.getElementById(field_id);
        if(!input){
            return;
        }
        let selected_chips = document.querySelectorAll(chips_class);
        let values = ""
        selected_chips.forEach(function(element, index){
            if(index < selected_chips.length - 1){
                values += element.dataset.value + ",";
            }else{
                values += element.dataset.value;
            }
        });
        input.value = values;
    }
    
    function initialize_filters(){
        filter_singular_init('order-status-input', '.order-status-chips.chips-selected');
        filter_singular_init('order-payment-option-input', '.order-payment-option-chips.chips-selected');
    }
    
    
    function integer_field_filter(element){
        let values = "";
        let input_target = document.getElementById(element.dataset.target);
        if(!input_target){
            return;
        }
        let filter_type = element.dataset.type;
        let container = document.getElementById(input_target.dataset.container);
        if (filter_type == "selection"){
            element.classList.toggle('chips-selected', !element.classList.contains('chips-selected'));
            let selected_chips = container.querySelectorAll('.chips-selected');
            selected_chips.forEach(function(el, index){
                if(index < selected_chips.length - 1){
                    values += el.dataset.value + ",";
                }else{
                    values += el.dataset.value;
                }
            });
        }else if(filter_type == "range-start" || filter_type == "range-end"){
            let start="";
            let end="";
            if(filter_type == 'range-start'){
                start = element.value;
                end = document.getElementById(element.dataset.rangeNext).value;
            }else if(filter_type == 'range-end'){
                end = element.value;
                start = document.getElementById(element.dataset.rangeNext).value;
            }
            if(start.length || end.length){
                values = start + '-' + end;
            }
    
        }else if (filter_type == "value"){
            values = element.value;
        }
        input_target.value = values;
    
    }
    
    function install_integer_filter(){
        $('.js-list-filter').on('click', function(){
            integer_field_filter(this);
        });
        $('.js-range-filter,.js-value-filter').on('keyup change', function(){
            integer_field_filter(this);
        });
    }
    var ListFilter = (function(){
        function ListFilter(){

        };

        ListFilter.prototype.init = function(){
            let self = this;
            $('.js-filter-btn').on('click', function(event){
                var ctx = $('#' + this.dataset.context);
                var input_name = this.dataset['input-name'];
                var container = $('#' + this.dataset.container);
                var filter_field = this.dataset["filter-field"];
                var value_list = [];
                $("input:checked[name=\"" + input_name + "\"]", ctx).each(function(){
                    value_list.push(this.dataset.value);
                });
                self.filter(container, filter_field, value_list);
            });
        
            $('.js-filter-reset-btn').on('click', function(event){
                var ctx = $('#' + this.dataset.context);
                var container = $('#' + this.dataset.container);
                self.reset_filter(ctx, container);
            });
        };

        ListFilter.prototype.filter = function(ctx, filter_field, value_list){
            if(!ctx || !filter_field || !value_list || value_list.length == 0){
                console.log("Filter called with missing argumtent");
                return;
            }
            $(".filterable", ctx).each(function(index, element){
                let filter_value = this.dataset[filter_field];
                $(this).toggle(value_list.includes(filter_value));
            });
        };

        ListFilter.prototype.reset_filter = function(ctx, container){
            if(!ctx || !container){
                console.log(" Reset Filter called with missing context");
                return;
            }
            $("input:checkbox", ctx).each(function(){
                this.checked = false;
            });
            $(".filterable", container).each(function(index, element){
                $(this).show();
            });
        };

        return ListFilter;
    })();
    let list_filter = {
        init : function(){
            $('.js-list-filter').on('keyup', function(event){
                event.stopPropagation();
                let input = event.target;
                let value = input.value.trim().toLowerCase();
                let fields = input.dataset.fields.split(' ');
                let target = document.getElementById(input.dataset.target);
                let node;
                let collection = target.children;
                let included = false;
                for(let index = 0; index < collection.length; index++){
                    node = collection[index];
                    for(let f of fields){
                        included = node.dataset[f].toLowerCase().includes(value);
                        if(included) break;
                    }
                    node.classList.toggle('hidden', !included); 
                }
            });
            filter_instance = new ListFilter();
            filter_instance.init();
            let filter_form = $('#filter-form');
            initialize_filters();
            install_integer_filter();
            filter_form.on('submit', function(event){
                $('input[name="csrfmiddlewaretoken"]').prop('disabled', true);
                let reload = clean_form_before_submit(this);
                if(reload){
                    event.stopPropagation();
                    event.preventDefault();
                    window.location.search = "";
                    window.location = location.pathname;
                }
            });
            $('.js-pagination').on('click', function(event){
                
                if(filter_form.length != 0){
                    event.preventDefault();
                    event.stopPropagation();
                    
                    let page = $(event.target).data('page');
                    let input = tag_api.create_tag({'element': 'input', 'options': {'cls': 'filter-input', 'name': 'page', 'value': page,'type':'text','id':'page'}});
                    filter_form.append(input)
                    filter_form.submit();
                }
            });
        }
    };
    return list_filter;
});
define('editor_api',['require','ajax_api', 'tag_api', /*'editor/editor',*/ 'editor/editorjs.umd',
'editor/plugins/header.min','editor/plugins/list.min', 'editor/plugins/link.min',
'editor/plugins/checklist.min', 'editor/plugins/quote.min', 'editor/plugins/table.min',
'editor/plugins/inline-image','editor/plugins/editor-emoji.min',
'editor/plugins/code.min','editor/plugins/inline-code.min',
'editor/plugins/marker.min'
], 
function(require, ajax_api, tag_api, EditorJS) {
    'use strict';

    const SAVE_DRAFT_INTERVAL = 10000; // 10s
    const EDITOR_CHANGE_TIMEOUT = 1000; // 1s
    let AUTO_SAVE_TIMER;
    let editor;
    let editor_content;
    let editor_content_target;
    let editor_target = null;


    const Header = require('editor/plugins/header.min');
    const List = require('editor/plugins/list.min');
    const Link = require('editor/plugins/link.min');
    //const Code = require('editor/plugins/code.min');
    const Marker = require('editor/plugins/marker.min');
    const Checklist = require('editor/plugins/checklist.min');
    const Quote = require('editor/plugins/quote.min');
    const Emoji = require('editor/plugins/editor-emoji.min');
    const Table = require('editor/plugins/table.min');
    const InlineImage = require('editor/plugins/inline-image');

    let headers = [null, "h1","h2", "h3", "h4", "h5", "h6"];
    let LIST_TYPE_MAPPING = {
        ordered: 'ol',
        unordered: 'ul',
        checklist: 'ul'

    };
    let BLOCK_MAPPING = {
        'header': render_header,
        'paragraph': render_paragraph,
        'table': render_table,
        'list': render_list,
        'linkTool': render_linkTool,
        'checklist': render_checklist,
        'quote': render_quote,
        'image': render_inlineImage,
        'emoji': render_emoji
    };

    function render_emoji(emoji){
        
        return emoji.data.text;
    }

    function render_header(header){
        let node = tag_api.create_tag({
            element:headers[header.data.level],
            options : {
                id:header.id,
                innerHTML: header.data.text
            }
        });
        return node;
    }

    function render_linkTool(linkTool){
        let node = tag_api.create_tag({
            element: "a",
            options : {
                id:linkTool.id,
                cls:'mat-button mat-button-text',
                href : linkTool.data.link,
                innerText: linkTool.data.link
            }
        });
        return node;
    }

    function render_inlineImage(inlineImage){
        let node = tag_api.create_tag({
            element: "img",
            options : {
                id:inlineImage.id,
                src: inlineImage.data.url,
                title: inlineImage.data.caption,
                cls:'img-responsive',
            }
        });
        return node;
    }

    function render_paragraph(paragraph){
        let node = tag_api.create_tag({
            element: "p",
            options : {
                id:paragraph.id,
                innerHTML : paragraph.data.text
            }
        });
        return node;
    }

    function render_table(table){
        let items = [];
        let startIndex = 0;
        let content;

        if(table.data.withHeadings){
            
            let ths = [];
            table.data.content[startIndex].forEach((h)=>{
                ths.push(tag_api.create_tag({
                    element:'th',
                    options:{
                        innerHTML:h
                    }
                }));
            });
            let tr = tag_api.create_tag({
                element: 'tr',
                options:{
                    children: ths
                }
            });
            items.push(tag_api.create_tag({
                element: 'thead',
                options:{
                    children: [tr]
                }
            }));

            startIndex = 1;
            content = table.data.content.slice(startIndex);
        }else{
            content = table.data.content;
        }

        let trs = [];
        content.forEach((item)=>{
            let tds = [];
            item.forEach((value) => tds.push(tag_api.create_tag({
                element: "td",
                options : {
                    innerText : value
                }
            })));
            trs.push(tag_api.create_tag({
                element: "tr",
                options : {
                    children : tds
                }
            }));
        });
        items.push(tag_api.create_tag({
            element: "tbody",
            options : {
                children: trs
            }
        }));
        let node = tag_api.create_tag({
            element: table.type,
            options : {
                id:table.id,
                children : items
            }
        });
        return node;
    }

    function render_list(list){
        let items = []
        list.data.items.forEach((item)=>{
            items.push(tag_api.create_tag({
                element: "li",
                options : {
                    innerHTML : item
                }
            })
            );
        });
        let node = tag_api.create_tag({
            element: LIST_TYPE_MAPPING[list.data.style],
            options : {
                id:list.id,
                children : items
            }
        });
        return node;
    }

    function render_checklist(checklist){
        let items = []
        checklist.data.items.forEach((item)=>{
            let input = tag_api.create_tag({
                element : "input",
                options : {
                    'type': 'checkbox',
                    'checked': item.checked
                }
            });
            let span = tag_api.create_tag({
                element: "span",
                options : {
                    innerHTML : item.text
                }
            });
            let div = tag_api.create_tag({
                element: "div",
                options : {
                    children : [input, span]
                }
            });
            items.push(tag_api.create_tag({
                element: "li",
                options : {
                    children : [div]
                }
            })
            );
        });
        let node = tag_api.create_tag({
            element: LIST_TYPE_MAPPING[checklist.type],
            options : {
                id:checklist.id,
                children : items
            }
        });
        return node;
    }

    function render_quote(quote){
        let span = tag_api.create_tag({
            element: "span",
            options : {
                innerHTML : quote.data.text
            }
        });
        let cite = tag_api.create_tag({
            element: "cite",
            options : {
                innerHTML : quote.data.caption
            }
        });
        let node = tag_api.create_tag({
            element: "blockquote",
            options : {
                id:quote.id,
                innerHTML : quote.data.text,
                children: [cite]
            }
        });
        return node;
    }

    function editor_content_clear(container){
        let editor_content_target = container || document.querySelector('#editor-content');
        if (editor_content_target){
            while(editor_content_target.firstChild){
                editor_content_target.removeChild(editor_content_target.firstChild);
            }
        }
    }

    function render_content(blocks){
        let elements = [];
        blocks.forEach((block)=>{
            elements.push(BLOCK_MAPPING[block.type](block));
        });
        return elements;
    }

    function show_editor_content(data){
        if(editor_content_target  && data){
            let html_elements = render_content(data['blocks']);
            html_elements.forEach((el)=>{
                editor_content_target.appendChild(el);
            });
        }
    }

    function on_editor_save(saved_data){
        editor_content = saved_data;
        if(editor_content['blocks'].length > 0){
            editor_target.value = JSON.stringify(editor_content);
        }else{
            editor_target.value = "";
        }
        
    }

    function on_editor_change(api, event){
        api.saver.save().then(on_editor_save).catch((error)=>{
            console.log("Error on saving editor content after changes : ", error);
        });
    }
    
    function editor_init(data, editor_holder){
        let init_data = data || {};
        if(editor_target.value.length){   
            try {
                init_data = JSON.parse(editor_target.value);
            } catch (error) {
                console.warn("error on parsing json data from description_json value : %s", editor_target.value);
                console.error(error);
                init_data = {};
            }
        }
        let holder = editor_holder || 'editor';
        let editor_tag = document.getElementById(holder);

        editor = new EditorJS({
            holder: holder,
            tools: {
                header : {
                    class : Header,
                    inlineToolbar : true
                },
                image: {
                    class : InlineImage,
                    inlineToolbar : true,
                    config: {
                        embed : {
                            display: true
                        }
                    }
                },
                list: {
                    class: List,
                    inlineToolbar: true
                },
                linkTool: {
                    class: Link,
                    inlineToolbar: true,
                    config:{
                        endpoint:"/api/fetchUrl/",
                    }
                },
                code: Code,
                emoji: {
                    class:Emoji,
                    inlineToolbar: true
                },
                checklist: {
                    class:Checklist,
                    inlineToolbar:true
                },
                quote: {
                    class:Quote,
                    inlineToolbar:true,
                    shortcut: 'CMD+SHIFT+Q',
                    config: {
                        quotePlaceholder: editor_tag.dataset.quotePlaceholder,
                        captionPlaceholder: editor_tag.dataset.captionPlaceholder,
                    },
                },
                Marker:{
                    class:Marker,
                    shortcut: 'CMD+SHIFT+M',
                },
                table: {
                    class: Table,
                    inlineToolbar: true,
                    config: {
                      rows: 2,
                      cols: 3,
                    },
                  },
            },
            data: init_data,
            autofocus: true,
            placeholder: editor_tag.dataset.placeholder,
            onReady: function(){
                console.log("Editor is ready");
            },
            onChange: (api, event) =>{
                if(AUTO_SAVE_TIMER){
                    clearTimeout(AUTO_SAVE_TIMER);
                }
                AUTO_SAVE_TIMER = setTimeout(on_editor_change, EDITOR_CHANGE_TIMEOUT, api, event);
            }
        });
        /*
        $(".js-save-btn").on('click', function(event){
            editor.save().then(on_editor_save).catch((error)=>{
                console.log("Error on saving editor content : ", error);
            });
        });
        */
       /*
        $(".js-clear-btn").on('click', (event)=>{
            console.log("Clearing editor content not implemented yet ");
        });
        */

        return editor;
    }

    var EditorWrapper = (function(){
        function EditorWrapper(holder, initial_data){

            this.editor = undefined;
            this.editor_data = {};
            this.initial_data = initial_data || {};
            this.target = undefined;
            this.holder_id = holder || 'editor';
            this.created = false;
            this.holder = document.getElementById(this.holder_id);

        }

        EditorWrapper.prototype.init = function(){
            if(!this.holder){
                console.warn("EditorWrapper called but no holder could be found.");
                return;
            }
            this.target = document.getElementById(this.holder.dataset.target);
            if(!this.target){
                console.warn("EditorWrapper called but no target could be found.");
                return;
            }
            if(!this.initial_data && this.target.value.trim().length > 0 ){
                try {
                    this.initial_data = JSON.parse(this.target.value);
                } catch (error) {
                    console.error(error);
                }
                
            }
            this.create_editor();
            this.created = true;
            return this.editor.isReady;
        }

        EditorWrapper.prototype.create_editor = function(){
            let self = this;
            this.editor = new EditorJS({
                holder: this.holder.id,
                tools: {
                    header : {
                        class : Header,
                        inlineToolbar : true
                    },
                    image: {
                        class : InlineImage,
                        inlineToolbar : true,
                        config: {
                            embed : {
                                display: true
                            }
                        }
                    },
                    list: {
                        class: List,
                        inlineToolbar: true
                    },
                    linkTool: {
                        class: Link,
                        inlineToolbar: true,
                        config:{
                            endpoint:"/api/fetchUrl/",
                        }
                    },
                    //code: Code,
                    emoji: {
                        class:Emoji,
                        inlineToolbar: true
                    },
                    checklist: {
                        class:Checklist,
                        inlineToolbar:true
                    },
                    quote: {
                        class:Quote,
                        inlineToolbar:true,
                        shortcut: 'CMD+SHIFT+Q',
                        config: {
                            quotePlaceholder: this.holder.dataset.quotePlaceholder,
                            captionPlaceholder: this.holder.dataset.captionPlaceholder,
                        },
                    },
                    Marker:{
                        class:Marker,
                        shortcut: 'CMD+SHIFT+M',
                    },
                    table: {
                        class: Table,
                        inlineToolbar: true,
                        config: {
                          rows: 2,
                          cols: 3,
                        },
                      },
                },
                data: this.initial_data,
                autofocus: true,
                placeholder: this.holder.dataset.placeholder,
                onReady: function(){
                    console.log("Editor is ready");
                },
                onChange: (api, event) =>{
                    if(AUTO_SAVE_TIMER){
                        clearTimeout(AUTO_SAVE_TIMER);
                    }
                    AUTO_SAVE_TIMER = setTimeout(self.on_editor_change.bind(self), EDITOR_CHANGE_TIMEOUT, api, event);
                }
            });
        }

        EditorWrapper.prototype.clear = function(){
            this.target.value = "";
            this.editor_data = {};
            this.editor.clear();

        }

        EditorWrapper.prototype.on_editor_change = function(api, event){
            this.editor.save().then(this.on_editor_save.bind(this)).catch((error)=>{
                console.log("Error on saving editor content after changes : ", error);
            });

        }

        EditorWrapper.prototype.on_editor_save = function(saved_data){
            this.editor_data = saved_data;
            if(this.editor_data['blocks'].length > 0){
                this.target.value = JSON.stringify(saved_data);
            }else{
                this.target.value = "";
            }
            
        }

        EditorWrapper.prototype.render_content = function(content){
            return render_content(content.blocks);
        }

        return EditorWrapper;
    })();


    function create_editor(){
        let editor_tag = document.getElementById('editor');
        if( !editor_tag){
            return;
        }
        editor_target = document.getElementById(editor_tag.dataset.target);
        if(!editor_target){
            console.warn("Editor target not found. %s", editor_target);
            return;
        }
        editor_init();
    }
    return {
        'render': render_content,
        'create_editor': create_editor,
        'EditorWrapper': EditorWrapper
    }
});
define('alphabet',[],function(){
// Ɓ  	Ɖ 	Ɛ 	Ǝ 	Ƒ  Ɣ Ŋ Ɔ Ʃ 	Ʋ	Ʒ
// ɓ 	ɖ  	ɛ 	ǝ 	ƒ  ɣ ŋ ɔ ʃ 	ʋ 	ʒ

/*
a 	α 	ʌ 	b 	ɓ 	c 	τ 	ç 	d 	ɗ 	ɖ 	ð 	e 	ɛ 	ǝ
f 	ƒ 	g 	ɠ 	ɣ 	h 	ɦ 	i 	ɩ 	j 	ɟ 	k 	ƙ 	l 	λ
m 	ɴ 	n 	ŋ 	ɲ 	o 	ɔ 	p 	ƥ 	q 	r 	ɽ 	s 	ʃ 	t
ƭ 	ʈ 	θ 	u 	ω 	v 	ʋ 	w 	x 	y 	ƴ 	z 	ʒ 	ƹ 	ʔ

*/

const CHUNK_SIZE = 10;
const GROUPS_SIZE = 4;

function regroup_chunks(chunks, n){
    let groups = [];
    for(let i = 0; i < chunks.length; i++){
        if(i % n === 0){
            groups.push([chunks[i]]);
        }else{
            groups[groups.length - 1].push(chunks[i]);
        }
    }
    return groups;
}

function chunks_of(str, n){
    let chunks = [];
    let chunk = undefined;
    for(let i = 0, size = str.length; i < size; i += n){
        chunk = str.substring(i, i + n);
        chunks.push(chunk.split(''));
    }
    return chunks;
}
let SPECIAL_CHARACTERS_LOWER = "āǎαʌⲃɓτⲥçɗðēeⲉɛǝẹƒɠɖɣⲯɦɩɟⲓƙλϫɴⲙŋɲñɔọƥɽṣʃⲣⳁƭʈⲩⲗθʉⲫωϣⲭⲁvⲡʋⲏⲅϥϭϧϩzʒƹⲝʔⲋɽ";
let UPPERCASE_LETTERS;
const LOWERCASE_LETTERS = [
    ['ɓ','ɖ','ɛ','ǝ','Ǝ','ƒ','ɣ','ŋ','ɔ','ʃ', 'ʋ'],
    ['ʒ', 'α','ʌ', 'τ', 'ç', 'ɖ','ɠ ','ð','ɟ','ƙ'],
    ['λ','ɲ','ƥ','ɽ','ƭ','θ','ω','ƴ','ƹ'],
    ['ḍ','c̱','ṣ','ⲁ','ⲃ','ⲅ','ⲉ','ⲍ','ⲏ','ⲑ','ⲗ','ⲝ'],
    ['ⲡ','ⲣ','ⲧ','ⲩ','ⲫ','ⲭ', 'ⲯ','ϣ','ϥ','ϫ','ϭ','ϯ','ⳁ']
];
UPPERCASE_LETTERS = LOWERCASE_LETTERS.map((row,index) => {
    return row.map(s => s.toUpperCase());
});

let SPECIAL_CHARACTERS_GROUPS = regroup_chunks(chunks_of(SPECIAL_CHARACTERS_LOWER, CHUNK_SIZE), GROUPS_SIZE);

return {
    'UPPERCASE_LETTERS': UPPERCASE_LETTERS,
    'LOWERCASE_LETTERS': LOWERCASE_LETTERS,
    'SPECIAL_CHARACTERS_GROUPS': SPECIAL_CHARACTERS_GROUPS
}
});
define('keyboard',['ajax_api','tag_api','alphabet'], 
    function(ajax_api,TAG_API, ALPHABET){
const QUERY_DELAY = 800;
const KEYBOARD_ID = "african-keyboard";
const KEYS_CONTAINER_ID = "keys";
let scheduled_query = false;
let event_registered = false;

// KEYBOARD 3 ROWS
// 1st ROW : 10 Chars
// 2nd ROW : 9 Chars
// 3rd ROW : 7 Chars
const AFRICAN_ALPHABET = [
    // Ā, Ă, Ǻ, ɐ,ɑ, Ċ, Ē, Ė, Ɛ, Ŋ
    ['\u0100','\u0102', '\u01FA', '\u0250', '\u0251','\u010A','\u0112','\u0116', '\u0190','\u014A'],
    // Ō,Ɔ, ɔ,  Ū, Ƨ, Ʒ, ǝ, Ǣ, ɩ
    [,'\u014C', '\u0186', '\u0254', '\u016A','\u01A7', '\u01B7', '\u01DD', '\u01E2','\u0269'],
    //	Δ, Θ, Λ, Π, Σ, Φ, Ψ, Ω
    ['\u0394','\u0398', '\u039B','\u03A0', '\u03A3', '\u03A6','\u03A8','\u03A9'],
]
let AFRICAN_ALPHABET_LIST = ALPHABET.LOWERCASE_LETTERS;
let LETTER_GROUPS = ALPHABET.SPECIAL_CHARACTERS_GROUPS;
let current_group = 0;
let GROUPS_SIZE = LETTER_GROUPS.length;
$('.js-user-search').on('keyup', function(event){
    event.stopPropagation();
    query = $(this).val().trim();
    if(query.length == 0 ){
        return;
    }
    search_options.data.search = query
    if(scheduled_query){
        clearTimeout(scheduled_query);
    }
    scheduled_query = setTimeout(userSearch, query_delay, search_options);
});

function fill_keyboard(already_filled){
    if(already_filled){
        return;
    }
    let keys = [];
    let keys_container = document.getElementById(KEYS_CONTAINER_ID);
    if(!keys_container){
        return;
    }
    /*
    AFRICAN_ALPHABET_LIST.forEach(function(row, index){
        let row_keys = [];
        row.forEach(function(key){
            let button = TAG_API.create_tag({'element': 'button', 'options': {
                'innerText': key
            }})
            row_keys.push(button);
            keys.push(button);
        });
        let div = TAG_API.create_tag({'element': 'div', 'options': {
            'cls': `keyboard-row row${index + 1}`,
            'children': row_keys
        }});
        keys_container.appendChild(div);
    });
    */
    LETTER_GROUPS.forEach(function(group, idx){
        let div_group = TAG_API.create_tag({'element': 'div', 'options': {
            'cls': `keyboard-group group-${idx + 1} hidden`,
            'id': `keyboard-group-${idx + 1}`,
            'data-group': idx,
        }});
        group.forEach(function(row, index){
            let row_keys = [];
            row.forEach(function(key){
                let button = TAG_API.create_tag({'element': 'button', 'options': {
                    'innerText': key
                }})
                row_keys.push(button);
                keys.push(button);
            });
            let div = TAG_API.create_tag({'element': 'div', 'options': {
                'cls': `keyboard-row row${index + 1}`,
                'children': row_keys
            }});
            div_group.appendChild(div);
        });
        keys_container.appendChild(div_group);
    });
    return keys;
}

function make_keyboard_draggable(){
    document.querySelectorAll('.draggable').forEach(drag_element);
}

function drag_element(tag){
    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
    let header = document.getElementById(tag.dataset.header);
    if(header){
        header.addEventListener('mousedown', drag_mouse_down);
    }else{
        tag.addEventListener('mousedown', drag_mouse_down);
    }

    function drag_mouse_down(e){
        e = e || window.event;
        if(e.button !== 0 ){
            return;
        }
        e.preventDefault();
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = close_drag_element;
        document.onmousemove = element_drag;
    }

    function element_drag(e) {
        e = e || window.event;
        if(e.button !== 0 ){
            return;
        }
        e.preventDefault();
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        tag.style.top = (tag.offsetTop - pos2) + 'px';
        tag.style.left = (tag.offsetLeft - pos1) + 'px';
    }

    function close_drag_element(e) {
        if(e.button !== 0 ){
            return;
        }
        document.onmouseup = null;
        document.onmousemove = null;
    }

}

function init_keyboard(tag){
    if(!tag){
        return;
    }
    //let keys = document.querySelectorAll(".keyboard button");

    let keys = fill_keyboard(event_registered);
    let keys_container = document.getElementById(KEYS_CONTAINER_ID);
    let content = document.getElementById("ip");
    let cap_lock = document.getElementById("cap-lock");
    let space = document.getElementById("space");
    let switch_keyboard = document.getElementById("switch-keyboard");
    let backspace = document.getElementById("backspace");
    let keyboard = document.getElementById(tag.dataset.keyboard);
    tag.addEventListener('click', function(event){
        tag.classList.toggle('active');
        
        keyboard.classList.toggle('hidden');
        if(tag.classList.contains('active')){
            keyboard.dataset.target = tag.dataset.target;
            content.innerText = document.getElementById(keyboard.dataset.target).value;
        }else{
            keyboard.dataset.target = "";
            content.innerText = "";
        }
    });
    let target = document.getElementById(tag.dataset.target);
    target.addEventListener('keyup', function(e){
        content.innerText = target.value;
    });
    if(event_registered){
        return;
    }
    switch_keyboard.addEventListener('click', function(e){
        keys_container.childNodes[current_group].classList.toggle('hidden');
        current_group = (current_group + 1 ) % GROUPS_SIZE;
        keys_container.childNodes[current_group].classList.toggle('hidden');
    });
    cap_lock.addEventListener('click', function(e){
        cap_lock.classList.toggle('active');
        if(cap_lock.classList.contains('active')){
            keys.forEach(function(key){
                key.innerText = key.innerText.toUpperCase();
            });
        }else{
            keys.forEach(function(key){
                key.innerText = key.innerText.toLowerCase();
            });
        }
    });
    make_keyboard_draggable();
    keys.forEach(k =>{
        // KEY Pressed
        k.addEventListener('mousedown', function (e) {
            e.preventDefault();
            e.stopPropagation();
            k.classList.add("active");
            content.innerText += k.innerText;
            if(keyboard.dataset.target){
                document.getElementById(keyboard.dataset.target).value = content.innerText;
            }
        });
        k.addEventListener('mouseup', function (e) {
            k.classList.remove("active");
        });

        // TOUCH Event
        k.addEventListener('touchstart', function (e) {
            e.preventDefault();
            e.stopPropagation();
            k.classList.add("active");
            content.innerText += k.innerText;
            if(keyboard.dataset.target){
                document.getElementById(keyboard.dataset.target).value = content.innerText;
            }
        });
        k.addEventListener('touchend', function (e) {
            k.classList.remove("active");
        });
        
    });
    // SPACE 
    space.addEventListener('mousedown', function(e){
        e.preventDefault();
        e.stopPropagation();
        space.classList.add("active");
        content.innerText += "\xa0";
        if(keyboard.dataset.target){
            document.getElementById(keyboard.dataset.target).value = content.innerText;
        }
    });
    space.addEventListener('mouseup', function(e){
        e.preventDefault();
        e.stopPropagation();
        space.classList.remove("active");
    });
    // TOUCH Event
    space.addEventListener('touchstart', function (e) {
        e.preventDefault();
        e.stopPropagation();
        space.classList.add("active");
        content.innerText += "\xa0";
        if(keyboard.dataset.target){
            document.getElementById(keyboard.dataset.target).value = content.innerText;
        }
        //content.innerText += k.innerText;
    });
    space.addEventListener('touchend', function (e) {
        space.classList.remove("active");
    });
    // BACKSPACE
    backspace.addEventListener('mousedown', function(e){
        e.preventDefault();
        e.stopPropagation();
        backspace.classList.add("active");
        content.innerText = content.innerText.slice(0, -1);
        if(keyboard.dataset.target){
            document.getElementById(keyboard.dataset.target).value = content.innerText;
        }
    });
    backspace.addEventListener('mouseup', function(e){
        backspace.classList.remove("active");
    });
    // TOUCH Event
    backspace.addEventListener('touchstart', function (e) {
        e.preventDefault();
        e.stopPropagation();
        backspace.classList.add("active");
        content.innerText = content.innerText.slice(0, -1);
        if(keyboard.dataset.target){
            document.getElementById(keyboard.dataset.target).value = content.innerText;
        }
    });
    backspace.addEventListener('touchend', function (e) {
        backspace.classList.remove("active");
    });
    // React to physical keyboard Event
    document.addEventListener('keydown', function(event){
        keys.forEach(function(key){
            if(key.innerText == event.key.toUpperCase()){
                key.classList.add('active');
            }
        });
        /*
        if(event.key == 'Backspace'){
            content.innerText = content.innerText.slice(0, -1);
        }else if(event.key == ' '){
            content.innerText += "\xa0";
        }else{
            content.innerText += event.key;
        }*/
        /*
        if(keyboard.dataset.target){
            content.innerText = document.getElementById(keyboard.dataset.target).value;
        }
        */
    });
    document.addEventListener('keyup', function(event){
        keys.forEach(function(key){
            if(key.innerText == event.key.toUpperCase()){
                key.classList.remove('active');
            }
        });
    });
    event_registered = true;
    if(keys_container.firstChild){
        keys_container.firstElementChild.classList.toggle('hidden');
    }
    
}
return {
    "register_keyboard": init_keyboard
}

});
define('constants',[],function(){
    const TOTAL_FORMS   = "TOTAL_FORMS";
    const INITIAL_FORMS = "INITIAL_FORMS";
    const MIN_NUM_FORMS = "MIN_NUM_FORMS";
    const MAX_NUM_FORMS     = "MAX_NUM_FORMS";
    const MAX_SUBMITTED_FORMS = 100;
    const QUERY_DELAY = 800;
    const SELECTION_TYPE_SOURCE = 0;
    const SELECTION_TYPE_TARGET = 1;
    const SELECTION_TYPE_AUTO = 2;
    const API_BASE_URL = "https://kemelang-local.com/api";
    const SITE_HOST = "https://kemelang-local.com";

    return {
        'API_BASE_URL': API_BASE_URL,
        'SITE_HOST': SITE_HOST
    }

});
define('word_tools',["ajax_api", 'tag_api', 'keyboard', 'editor_api', 'constants'],function(ajax_api, tag_api, Keyboard, Editor_API, Constants) {
    'use strict';
    const TOTAL_FORMS   = "TOTAL_FORMS";
    const INITIAL_FORMS = "INITIAL_FORMS";
    const MIN_NUM_FORMS = "MIN_NUM_FORMS";
    const MAX_NUM_FORMS     = "MAX_NUM_FORMS";
    const MAX_SUBMITTED_FORMS = 100;
    const PREFIX = "word";
    const QUERY_DELAY = 800;
    const API_BASE_URL = Constants.API_BASE_URL;

    function remove_children(tag){
        if(!tag){
            return;
        }
        while(tag.firstChild){
            tag.removeChild(tag.firstChild);
        }
    }

    function register_selectable(container, selectable_list){
        let selectables = selectable_list || document.querySelectorAll('.js-selectable', container);
        selectables = Array.from(selectables);
        let select_all = $('.js-select-all');
        select_all = document.querySelectorAll('.js-select-all', container);
        select_all.forEach(input=>{
            input.addEventListener('change', function(event){
                selectables.forEach(i=>{
                    i.checked = input.checked;
                });
            });
        });
        selectables.forEach(i=>{
            i.addEventListener('change', function(event){
                let all_selected = selectables.every(input => input.checked);
                select_all.forEach(input => input.checked = all_selected);
            });
        });
    }

    function WordTools(){
        
        this.form = document.getElementById('word-form-translation');
        this.word_form = document.getElementById('word-form-translation');
        this.updatable_attrs = ['id','name','for','data-name','data-id','data-error'];
        this.wrappers = [];
        this.preview_value = undefined;
        this.word_index = undefined;
        this.form_is_valid = false;
        this.total_form = 0;
        this.scheduled_query = undefined;
        this.input_max_length = 32;
        this.replace_pattern = /\d+/g;
    };
    WordTools.prototype.init = function(){
        var self = this;
        this.word_inputs = document.querySelectorAll('.search-word');
        if(this.word_inputs.length == 0){
            return;
        }
        this.word_input = document.getElementById('search-word');
        this.word_inputs.forEach(input =>{
            if(input.dataset.keyboard_btn){
                Keyboard.register_keyboard(document.getElementById(input.dataset.keyboard_btn));
            }
        });
        /*
        if(this.word_input.dataset.keyboard_btn){
            this.keyboard_btn = document.getElementById(this.word_input.dataset.keyboard_btn);
            Keyboard.register_keyboard(this.keyboard_btn);
        }
        */
        
        let forms = document.querySelectorAll('.update-form');
        forms.forEach(function(form){
            form.addEventListener('submit', function(event){
                event.stopPropagation();
                event.preventDefault();
                self.submit(form);
                return false;
            });
        });
        /*
        if(this.word_form){
            this.word_form.addEventListener('submit', function(event){
                event.stopPropagation();
                event.preventDefault();
                self.submit();
                return false;
            });
        }*/
        ['keyup','change'].forEach(function (e) {
            self.word_inputs.forEach(function(input){
                input.addEventListener(e, function(event){
                    event.stopPropagation();
    
                    if(!input || !input.value || !input.value.trim().length){
                        input.value = "";
                        remove_children(document.getElementById(input.dataset.target));
                        return;
                    }
                    if(!input.dataset.target){
                        remove_children(document.getElementById(input.dataset.target));
                        return;
                    }
                    if(self.scheduled_query){
                        clearTimeout(self.scheduled_query);
                    }
                    self.scheduled_query = setTimeout(self.search_word.bind(self), QUERY_DELAY, input);
                    //self.search_word(result.word_input);
                });
            });
        });
        /*
        ['keyup','change'].forEach(function (e) {
            self.word_input.addEventListener(e, function(event){
                event.stopPropagation();

                if(!self.word_input || !self.word_input.value || !self.word_input.value.trim().length){
                    self.word_input.value = "";
                    remove_children(document.getElementById(self.word_input.dataset.target));
                    return;
                }
                if(!self.word_input.dataset.target){
                    remove_children(document.getElementById(self.word_input.dataset.target));
                    return;
                }
                if(self.scheduled_query){
                    clearTimeout(self.scheduled_query);
                }
                self.scheduled_query = setTimeout(self.search_word.bind(self), QUERY_DELAY, self.word_input);
                //self.search_word(result.word_input);
            });
            
        });
        */
        console.log("WordTools ready");
    };



    WordTools.prototype.search_word = function(tag){
        if(!tag || !tag.value.trim()){
            return;
        }
        if(tag.value.trim() == this.preview_value){
            return;
        }
        let self = this;
        let exclude_word = "";
        let exclude_lang = "";
        let filter_lang = "";
        if(tag.dataset.excludeWord){
            exclude_word = `&exclude-word=${tag.dataset.excludeWord}`;
        }
        if(tag.dataset.excludeLang){
            exclude_lang = `&exclude-lang=${tag.dataset.excludeLang}`;
        }
        if(tag.dataset.filterLang){
            filter_lang = `&filter-lang=${tag.dataset.filterLang}`;
        }
        this.preview_value = tag.value.trim();
        let url = `${Constants.API_BASE_URL}/search-word/?word=${tag.value}${exclude_word}${exclude_lang}${filter_lang}`;
        let option = {
            type:'GET',
            dataType: 'json',
            processData: false,
            contentType : false,
            crossDomain: true,
            url : url
        }
        ajax_api.ajax(option).then(function(response){
            self.on_word_exist(tag, response.found, response);
        }, function(reason){
            console.error(reason);
        });
    }



    WordTools.prototype.on_word_exist = function(tag, word_exist, response){
        let result_container = document.getElementById(tag.dataset.target);
        tag.classList.toggle('warning', !word_exist);
        this.form_is_valid = !word_exist;
        remove_children(result_container);
        if(!(response.success && word_exist)){
            let span_word = tag_api.create_tag({'element': 'span', 'options': {
                'cls':'bold',
                'innerText': `No word found for query \"${response.query}\"`
            }});
            let div = tag_api.create_tag({'element': 'div', 'options': {
                'cls': 'full',
                'children': [span_word]
            }});
            result_container.appendChild(div);
            return;
        }
        let inputs = [];
        response.words.forEach(word =>{
            let children = [];
            
            let input = tag_api.create_tag({'element': 'input', 'options': {
                'id': `word-${word.id}`,
                'cls': 'js-selectable',
                'type': 'checkbox',
                'name': tag.dataset.field,
                'value': word.id,
            }});
            let label = tag_api.create_tag({'element': 'label', 'options': {
                'cls':'bold',
                'innerText': `${word.word} [${word.langage.name}]`,
                'htmlFor': `word-${word.id}`
            }});
            let span_word = tag_api.create_tag({'element': 'div', 'options': {
                'cls':'result-header',
                'children': [label,input]
            }});
            children.push(span_word);
            if(word.definition){
                let span_def = tag_api.create_tag({'element': 'span', 'options': {
                    'innerText': word.definition
                }});
                let definition = tag_api.create_tag({'element': 'div', 'options': {
                    'cls': 'result-content',
                    'children': [span_def]
                }});
                children.push(definition);
            }else if (word.description && word.description.blocks){
                let description = tag_api.create_tag({'element': 'div', 'options': {
                    'cls': 'result-content',
                    'children': Editor_API.render(word.description.blocks)
                }});
                children.push(description);
            }
            
            let div = tag_api.create_tag({'element': 'div', 'options': {
                'cls': 'search-result',
                'children': children
            }});
            result_container.appendChild(div);
            inputs.push(input);
        });
        register_selectable(result_container, inputs);
    }

    WordTools.prototype.clear = function(){
        this.word_inputs.forEach(input =>{
            remove_children(document.getElementById(input.dataset.target));
            input.value = "";
        });
    }


    WordTools.prototype.submit = function(form){
        let self = this;
        let formData = new FormData(form);
        let url = `${Constants.API_BASE_URL}${form.dataset.endpoint}`;
        let option = {
            type:'POST',
            dataType: 'json',
            processData: false,
            contentType : false,
            enctype : 'multipart/form-data',
            crossDomain: true,
            data: formData,
            url : url
        }
        ajax_api.ajax(option).then(function(response){
            if(response.success){
                self.clear();
                notify({'level': 'info', 'content': response.message})
            }else{
                notify({'level': 'warn', 'content': response.message});
            }
        }, function(reason){
            console.error(reason);
        });
    }
    return WordTools;
});

define('core',['ajax_api', 'filters', 'editor_api', 'word_tools'], 
function(ajax_api, Filter, Editor_API, WordTools) {
    'use strict';
    let messages;
    let notification_wrapper;
    let fadeDelay = 5000; // 5s
    var CAROUSEL_INTERVAL = 5000;
    const RESOURCE_EDIT_TIMEOUT = 15; // Minutes
    const RESOURCE_EDIT_MAX_IDLE = 3; // Minutes
    const MIN_LEN_WARNING = 20;
    const MAX_COMMENT_TEXT_LEN = 256;
    const MAX_MAIL_TEXT_LEN = 512;
    const LOGIN_REQUIRED_KEY = "login_required";
    const UI_TOGGLE_OPEN_CSS = "fa-bars";
    const UI_TOGGLE_CLOSE_CSS = "fa-times";

    function notify(message){
        if( typeof notification_wrapper === 'undefined' || typeof messages === 'undefined'){
            console.warn("Notify call for message %s. But There is no messages container", message);
            return;
        }
        let li = $('<li />', {
            "class" : message.level,
        });
        let div = $('<div />', {
            "class" : "notification flex"
        });
        div.append($('<i />', {
            "class" : "fas fa-info-circle icon"
        })).append($('<span />', {
            'text': message.content
        })).appendTo(li);
        li.appendTo(messages);
        notification_wrapper.fadeIn().delay(fadeDelay).fadeOut('slow', function () {
            messages.empty();
        });
    }

    function notify_init(wrapper, message_container){
    
        if(typeof wrapper === 'undefined'){
            return;
        }

        if(typeof message_container === 'undefined' || $('li', message_container).length == 0){
            return;
        }

        wrapper.fadeIn().delay(fadeDelay).fadeOut('slow', function () {
            message_container.empty();
        });
    }
    
    var Collapsible = (function(){
        function Collapsible(){
            this.$collapsible   = {}; // all element with collapsible class
            this.$close         = {}; // all button used to close a collapsible elements.
            this.init();
    
        }
        Collapsible.prototype.init = function(){
            this.$collapsible = $(".collapsible");
            let filter_content = $('#filter-content');
            let content_fitler = document.getElementById('filter-content');
            if(this.$collapsible.length == 0){
                return;
            }
            /*
            $('.collapsible').on('click', '.collapse-toggle', function(event){
                event.stopPropagation();
                $('.js-attr-opt').toggleClass('hidden');
                let content  = $('#' + $(this).data('target'));
                if(content.eq(filter_content)|| content.parent().eq(filter_content)){
                    $('.collapsible .collapse-content', filter_content).not(content).hide();
                }else{
                    $('.collapsible .collapse-content').not(content).hide();
                }
                content.toggle();
            });
            */
            $('.collapsible').on('click', '.collapse-toggle', function(event){
                event.stopPropagation();
                $('.js-attr-opt').toggleClass('hidden');
                let target  = document.getElementById(this.dataset.target);
                if(!target) return;
                let display = target.style.display || 'none';
                if(target == content_fitler || target.parentElement == content_fitler){
                    content_fitler.querySelectorAll('.collapse-content').forEach((el)=>{
                        el.classList.toggle('hidden', el != target);
                    });
                }else{
                    document.querySelectorAll('.collapse-content').forEach((el)=>{
                        el.classList.toggle('hidden', el != target);
                    });
                }
                /*
                if(display != "none"){
                    target.style.display = 'none';
                    target.parentElement.classList.add('activated');
                }else{
                    target.style.display = 'block';
                    target.parentElement.classList.remove('activated');
                }*/
                target.style.display = display == 'none' ? 'block': 'none';
                this.parentElement.classList.toggle('activated', display == 'none');
                
                //$('input.clearable', content).val('');
            });
            $('.collapsible .toggle').on('click', function(event){
                event.stopPropagation();
                let parent = $(this).parent();
                let target = $('.' + this.dataset.toggle, parent);
                $('input', parent).val('');
                
                target.toggle();
            });
            $(this.$collapsible).on("click", ".open", function(event){
                event.stopPropagation();
                let target =$(event.target).data("target");
                if(target == undefined){
                    $(this).parent().children(".collapse-content").toggle();
                }
                else{
                    $(target).toggle();
                }
            });
    
            $(this.$collapsible).on("click", ".close", function(event){
                event.stopPropagation();
                let target =$(event.target).data("target");
    
                if(target == undefined){
                    $(this).parent().toggle();
                }
                else{
                    $(target).toggle();
                }
            });
        };
    
        return Collapsible;
    })();
    
    
    var Modal = (function(){
        function Modal(options){
            this.modal = {};
            this.init();
        }
        Modal.prototype.init = function(){
            let that = this;
            function clear_inputs_field(inputs) {
                if(!inputs || inputs-length == 0){
                    return;
                }
                Array.from(inputs).filter(input => { return ("clearable" in input.dataset === false) || (input.dataset.clearable === "true"); })
                    .forEach(function (el, index) {
                        el.value = "";
                        el.dataset.update = "";
                        if (el.type == "file") {
                            el.files = null;
                        }
                        if (el.type == "checkbox" || el.type == "radio") {
                            el.checked = false;
                        }
                    });
            }

            $(".js-open-modal").click(function(event){
                if((LOGIN_REQUIRED_KEY in this.dataset) && this.dataset[LOGIN_REQUIRED_KEY] == "1" ){
                    event.stopPropagation();
                    event.preventDefault();
                    notify({"level": "info", "content": this.dataset.message});
                    return false;
                }
                let modal = document.getElementById(this.dataset.target);
                that.modal = modal;
                
                modal.style.display = "flex";
                if(window){
                    $(window).click(function(eventModal){
                        if(eventModal.target == modal){
                            modal.style.display = "none";
                            that.modal = undefined;
                            let inputs = modal.querySelectorAll("input:not([name='csrfmiddlewaretoken']):not([type='hidden']), textarea");
                            let clearables = modal.querySelectorAll('.clearable');
                            if(clearables){
                                clearables.forEach((el) =>{
                                    el.innerText = "";
                                    el.classList.remove('warning', 'danger');
                                });
                            }
                            clear_inputs_field(inputs);
                        }

                        
                    });
                }
            });
    
            $(".js-close-modal").click(function(event){
                event.stopPropagation();
                let modal = document.getElementById(this.dataset.target);
                modal.style.display = "none";
                that.modal = undefined;
                let inputs = modal.querySelectorAll("input:not([name='csrfmiddlewaretoken']):not([type='hidden']), textarea");
                let clearables = modal.querySelectorAll('.clearable');
                if(clearables){
                    clearables.forEach((el) =>{
                        el.innerText = "";
                        el.classList.remove('warning', 'danger');
                    });
                }
                clear_inputs_field(inputs);
            });
        }
        return Modal;
    })();

    function init_tabs(){
        let tabs = document.querySelectorAll('.tab');
        if(tabs.length == 0){
            return;
        }
        let removeClass = (list, cls) => {
            list.forEach(tag =>{
                tag.classList.remove(cls);
                document.getElementById(tag.dataset.target).style.display = "none";
            });
        }
        tabs.forEach((tab) =>{
            
            tab.addEventListener('click', (event)=>{
                if(tab.classList.contains('active')){
                    return;
                }
                removeClass(tabs, 'active');
                tab.classList.add('active');
                document.getElementById(tab.dataset.target).style.display = "block";
            });
        });
    }

    function autoplayCarousel() {
        const carouselEl = document.getElementById("carousel");
        if(!carouselEl){
            return;
        }
        const slideContainerEl = carouselEl.querySelector("#slide-container");
        const slideEl = carouselEl.querySelector(".slide");
        
        let slideWidth = slideEl.offsetWidth;
    
        document.querySelectorAll(".slide-indicator")
            .forEach((dot, index) => {
                dot.addEventListener("click", () => navigate(index));
                dot.addEventListener("mouseenter", () => clearInterval(autoplay));
            });
        // Add keyboard handlers
        document.addEventListener('keydown', (e) => {
            if (e.code === 'ArrowLeft') {
                clearInterval(autoplay);
                navigate("backward");
            } else if (e.code === 'ArrowRight') {
                clearInterval(autoplay);
                navigate("forward");
            }
        });
        // Add resize handler
        window.addEventListener('resize', () => {
            slideWidth = slideEl.offsetWidth;
        });
        // Autoplay
        let autoplay = setInterval(() => navigate("forward"), CAROUSEL_INTERVAL);
        slideContainerEl.addEventListener("mouseenter", () => clearInterval(autoplay));
        slideContainerEl.addEventListener("mouseleave", () => {
            autoplay = setInterval(() => navigate("forward"), CAROUSEL_INTERVAL);
        });
        // Slide transition
        const getNewScrollPosition = (arg) => {
            const gap = 10;
            const maxScrollLeft = slideContainerEl.scrollWidth - slideWidth;
            if (arg === "forward") {
                const x = slideContainerEl.scrollLeft + slideWidth + gap;
                return x <= maxScrollLeft ? x : 0;
            } else if (arg === "backward") {
                const x = slideContainerEl.scrollLeft - slideWidth - gap;
                return x >= 0 ? x : maxScrollLeft;
            } else if (typeof arg === "number") {
                const x = arg * (slideWidth + gap);
                return x;
            }
        }
        const navigate = (arg) => {
            slideContainerEl.scrollLeft = getNewScrollPosition(arg);
        }
        // Slide indicators
        const slideObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const slideIndex = entry.target.dataset.slideindex;
                    carouselEl.querySelector('.slide-indicator.active').classList.remove('active');
                    carouselEl.querySelectorAll('.slide-indicator')[slideIndex].classList.add('active');
                }
            });
        }, { root: slideContainerEl, threshold: .1 });
        let slides = document.querySelectorAll('.slide');
        if(!slides || slides.length <= 1){
            return;
        }
        slides.forEach((slide) => {
            slideObserver.observe(slide);
        });
    }
    function kiosk_update(event){
        document.getElementById('main-image').src = event.target.src;
        $(".kiosk-image").removeClass('active').filter(event.target).addClass("active");
    }
    async function track_action(track_element){
        let csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        let url = '/api/track-actions/';
        let action = parseInt(track_element.dataset.action);
        let options = {
            url : url,
            type: 'POST',
            data : {'action': action, 'csrfmiddlewaretoken': csrfmiddlewaretoken.value},
            dataType : 'json',
            cache : false,
        };
        ajax_api.ajax(options, false).then(function(response){}, function(error){});
    }
    autoplayCarousel();
    let modal = new Modal();
    let collapsible =  new Collapsible();
    function image_preview(){
        let previewer = document.getElementById('image-previewer');
        if(!previewer){
            return;
        }
        let images = previewer.querySelectorAll('.preview-image');
        if(!images){
            return;
        }
        let max_index = parseInt(previewer.dataset.count);
        let active_image = previewer.querySelector('#active-image');
        let prev_btn = previewer.querySelector('.prev');
        let close_btn = previewer.querySelector('.js-close-modal');
        let next_btn = previewer.querySelector('.next');
        let viewer_current_index = previewer.querySelector('.viewer-current-index');
        let current = parseInt(previewer.dataset.current);
        prev_btn.addEventListener('click', function(event){
            event.stopPropagation();
            current--;
            if(current >= 0){
                active_image.src = images[current].src;
                next_btn.classList.remove('disabled');
                previewer.dataset.current = current;
            }else{
                current = 0;
            }
            this.classList.toggle('disabled', current == 0);
            viewer_current_index.innerText = current + 1;
        });
        next_btn.addEventListener('click', function(event){
            event.stopPropagation();
            current++;
            if(current < max_index){
                active_image.src = images[current].src;
                prev_btn.classList.remove('disabled');
                previewer.dataset.current = current;
            }else{
                current = max_index;
            }
            this.classList.toggle('disabled', current >= (max_index - 1));
            viewer_current_index.innerText = current + 1;
        });
        close_btn.addEventListener('click', function(event){
            current = 0;
            active_image.src = images[current].src;
            next_btn.classList.remove('disabled');
            prev_btn.classList.add('disabled');
            previewer.dataset.current = current;
            viewer_current_index.innerText = current + 1;
        });
    }
    function input_check_max_limit2(input){
        let max_len = parseInt(input.dataset.maxLength);
        let len = input.value.length;
        let target = document.getElementById(input.dataset.target);
        if(target){
            target.innerText = len
            target.classList.toggle("danger", (max_len - len) <= 0);
            target.classList.toggle("warning", ((max_len - len) > 0 && (max_len - len) <= MIN_LEN_WARNING));
        }else{
            console.warn("input check max length failed : target for selector %s is null", input.dataset.target)
        }
        
    }

    function is_mail_form_valid(form){
        let inputs_selectors = [
            {'id':'customer_name', 'name':'customer_name','type': 'input', 'validator': null, valid:false, missing:false, required:true},
            {'id':'customer_email', 'name':'customer_email','type': 'input', 'validator': null, valid:false, missing:false, required:true},
            {'id':'subject', 'name':'subject','type': 'input', 'validator': null, valid:false, missing:false, required:true},
            {'id':'message', 'name':'message','type': 'textarea', 'validator': null, valid:false, missing:false, required:true},
        ];
    
        inputs_selectors.forEach(selector =>{
            let input = form.querySelector(`${selector.type}[name='${selector.name}']`);
            if(input == null){
                selector.missing = true;
            }else{
                selector.valid = selector.validator != null ? selector.validator(input.value) : input.value != "";
                input.classList.toggle('error', !selector.valid);
            }
        });
        let some_invalid = function(selector){
            return (selector.valid == false || selector.missing) && selector.required;
        }
        return !inputs_selectors.some(some_invalid);
    }
    
    function send_mail_listeners(){
        let form = document.getElementById('new-mail');
        let forms = document.querySelectorAll('.mail-form');
        if(forms.length == 0){
            return;
        }
        let on_success = function(response, close_target){
            if(response.success){
                let subject = document.getElementById('subject');
                let message = document.getElementById('message');
                let length_counter = document.getElementById('length-counter');
                
                subject.value = "";
                message.value = "";
                length_counter.value = "0";
                length_counter.classList.remove('danger');
                length_counter.classList.remove('warning');
                if(close_target && close_target != ''){
                    let close_modal_btn = document.getElementById(close_target);
                    close_modal_btn.dispatchEvent(new Event('click'));
                }
            }else{
                console.log(response);
            }
        }
        forms.forEach(function(form){
            form.addEventListener('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                if(!is_mail_form_valid(form)){
                    return false;
                }
                let close_target = form.dataset.close;
                let formData = new FormData(form);
                let url = form.dataset.url;
    
                let options = {
                    url : url,
                    type: 'POST',
                    enctype : 'multipart/form-data',
                    data: formData,
                    dataType : 'json',
                    processData : false,
                    cache : false,
                    contentType : false
                };
                ajax_api.ajax(options).then(function(response){
                    let msg = {
                        content : response.message,
                        level : response.success
                    }
                    notify(msg);
                    if(form.dataset.onsuccess == "1"){
                        on_success(response, close_target);
                    }
                    
                }, function(reason){
                    console.error("Mail could not be sent.");
                    console.error(reason);
                });
            });
        });
        
    }

    function update_rating(el){
        let current = el.dataset.index;
        let stars  = document.querySelectorAll('.js-star');
        stars.forEach(function(tag, index){
            tag.classList.toggle('selected', current >= index);
        });
    }

    function init_collapsible(){
        let toggle_list = document.querySelectorAll('.collapse-v2-toggle');
        if( toggle_list == 0){
            return;
        }
        toggle_list.forEach((t,i)=>{
            t.addEventListener('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                let activate = !this.classList.contains('active');
                /*
                toggle_list.forEach((e,i)=>{
                    e.classList.remove('active');
                    if(e.dataset.target){
                        let el = document.getElementById(e.dataset.target);
                        el.style.display = 'none';
                    }else{
                        if(e.parentElement.nextElementSibling){
                            e.parentElement.nextElementSibling.style.display = 'none';
                        }
                    }
                });*/
                this.classList.toggle('active', activate);
                if(this.dataset.target){
                    let el = document.getElementById(this.dataset.target);
                    if(el){
                        el.style.display = activate ? 'block': '';
                    }
                }else{
                    //this.parentElement.nextElementSibling.classList.toggle('hidden', !activate);
                    if(this.nextElementSibling){
                        this.nextElementSibling.style.display = activate ? 'block': '';
                    }
                    
                }
            });
        });
    }


    function init_accordion(){
        let toggle_list = document.querySelectorAll('.accordion-toggle');
        if( toggle_list == 0){
            return;
        }
        toggle_list.forEach((t,i)=>{
            t.addEventListener('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                let activate = !this.classList.contains('active');
                toggle_list.forEach((e,i)=>{
                    e.classList.remove('active');
                    if(e.dataset.target){
                        let el = document.getElementById(e.dataset.target);
                        el.style.display = 'none';
                    }else{
                        if(e.parentElement.nextElementSibling){
                            e.parentElement.nextElementSibling.style.display = 'none';
                        }
                    }
                });
                this.classList.toggle('active', activate);
                if(this.dataset.target){
                    let el = document.getElementById(this.dataset.target);
                    if(el){
                        el.style.display = activate ? 'block': '';
                    }
                }else{
                    //this.parentElement.nextElementSibling.classList.toggle('hidden', !activate);
                    if(this.parentElement.nextElementSibling){
                        this.parentElement.nextElementSibling.style.display = activate ? 'block': '';
                    }
                    
                }
            });
        });
    }

    function init_dropdown(){
        let toggle_list = document.querySelectorAll('.dropdown-toggle');
        if( !toggle_list){
            return;
        }
        

        toggle_list.forEach((t,i)=>{
            t.addEventListener('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                toggle_list.forEach((e,i)=>{
                    if((e != t) && (e.dataset.target != t.dataset.target)){
                        if(e.dataset.target){
                            let el = document.getElementById(e.dataset.target);
                            if(el){
                                el.classList.remove('show');
                            }
                        }else{
                            if(e.nextElementSibling){
                                e.nextElementSibling.classList.remove('show');
                            }
                        }
                    }
                });
                if(this.dataset.target){
                    let el = document.getElementById(this.dataset.target);
                    if(el){
                        el.classList.toggle('show');
                    }
                }else{
                    if(this.nextElementSibling){
                        this.nextElementSibling.classList.toggle('show');
                    } 
                }
            });
        });
        
    }

    function init_editor(){
        let editor_tags = document.querySelectorAll('.editor');
        editor_tags.forEach((tag) =>{
            let target = document.getElementById(tag.dataset.target);
            let initial_data = null;
            if(target.value.length > 0 ){
                try {
                    initial_data = JSON.parse(target.value);
                } catch (error) {
                    console.error(`Error while parsing json string for tag ${tag.dataset.editor}`, error);
                }
            }
            let editor = new Editor_API.EditorWrapper(tag.dataset.editor, initial_data);
            editor.init()
            if(!editor.created){
                console.warn(`Editor not created for tag ${tag.dataset.editor}`);
            }
        });
        
    }
   
    function init_word_tools(){
        let word_tools = new WordTools();
        word_tools.init();
    }

    $(document).ready(function(){
        if(window){
            window.notify = notify;
        }
        init_accordion();
        init_dropdown();
        init_collapsible();
        init_tabs();
        send_mail_listeners();
        init_editor()
        init_word_tools();
        notification_wrapper = $('#notifications-wrapper');
        messages = $('#messages', notification_wrapper);
        notify_init(notification_wrapper, messages);
        Filter.init();
        image_preview();
        $('.js-star').on('click', function(event){update_rating(this)});
        $('.js-select-image').on('click', kiosk_update);
        $('.js-dialog-open').on('click', function(){
            let target = $('#' + this.dataset.target);
            target.show();
        });
        
        $('.js-dialog-close').on('click', function(){
            let target = $("#" + this.dataset.target);
            target.hide();
            //var parent = $(this).parents('.dialog').hide();
            $('input[type!="hidden"]', target).val('');
        });
        $('.js-reveal-btn, .js-revealable-hide').on('click', function(){
            let target = $(this.dataset.target).parent();
            $('.js-revealable', target).toggleClass('hidden');
        });
        $('.js-clear-input').on('click', function(){
            
            let target = $('#' + this.dataset.target);
            $('input[type!=checkbox]', target).val('');
            $('input:checkbox', target).val('').prop('checked', '');
        });
        let selectable_list = $(".js-selectable");
        let activable_list = $(".js-activable");
        let select_all = $('.js-select-all');
        selectable_list.on('click', function(){
            let is_selected = selectable_list.is(function (el) {
                return this.checked;
            });
            
            let selected_all = selectable_list.is(function (el) {
                return !this.checked;
            });
            select_all.prop('checked', !selected_all);
            activable_list.prop('disabled', !is_selected);
        });

        select_all.on('click', function(){
            selectable_list.prop('checked', this.checked);
            activable_list.prop('disabled', !this.checked);
        });
        $(".limited-input").on("keyup", function(event){
            event.stopPropagation();
            input_check_max_limit2(this);
        });

        $('.js-menu').on('click', function(){
            $('#menu-overlay-label').click();
            $('.js-menu-close').show();
            $(this).hide();

        });
        $('.js-menu-close').on('click', function(){

            $('#menu-overlay-label').click();
            $('.js-menu').show();
            $(this).hide();
        });
        $('.js-action-abtest').on('click', function(e){
            if(!this.dataset.action){
                return;
            }
            track_action(this);
        });
        let btn_toggle_list = document.querySelectorAll("button[data-ui-toggle='collapse']");
        btn_toggle_list.forEach((button)=>{
            if(!button.dataset.uiTarget){
                console.warn("found button with data-ui-toggle set but no target were defined", button);
                return;
            }
            button.addEventListener('click',(event)=>{
                let target = document.getElementById(button.dataset.uiTarget);
                target.classList.toggle('show');
                if(!button.dataset.custom){
                    let i = button.querySelector("i");
                    i.classList.toggle(UI_TOGGLE_OPEN_CSS);
                    i.classList.toggle(UI_TOGGLE_CLOSE_CSS);
                }
                
            });

        });
    });
});

define('accounts',['ajax_api','exports'], function(ajax_api, exports) {
    'use strict';
    let user = {};
    
    let user_available = false;
    let query_delay = 800;
    let scheduled_query = false;
    let $user_search_result = undefined;
    let $user_search_target = undefined;
    let user_search_target = undefined;
    let $user_search_target_name = undefined;
    let callback;
    let query = "";
    let seller;
    let subscription_seller;
    let subscription_title;
    let csrfmiddlewaretoken;
    let options = {
        url:'/api/current-user/',
        type: 'GET',
        data : {},
        dataType: 'json'
    };
    let search_options = {
        url:'/api/user-search/',
        type: 'GET',
        data : {'search': query},
        dataType: 'json'
    };

    let subscription_options = {
        url:'/api/sellers/subscription/',
        type: 'POST',
        data : {'seller': seller, 'csrfmiddlewaretoken': ""},
        dataType: 'json'
    }

    function activate_editable_inputs(context){
        let $editable_inputs = $('input.js-editable', context);
        $editable_inputs.addClass('editable').prop('disabled', false);
    
    }
    
    function deactivate_editable_inputs(context){
        let $editable_inputs = $('input.js-editable', context);
        $editable_inputs.removeClass('editable').prop('disabled', true);;
    }


    function userSearch(options){

        ajax_api.ajax(options).then(function(response){
            $user_search_result.empty();
            response.forEach(function(user, index){
                let full_name = user.first_name + " " +  user.last_name;
                $('<li>').data('user-id', user.id).data('user-name', full_name).html(full_name + " [" + user.username + "]").
                on('click', function(event){
                    event.stopPropagation();
                    let user_id = $(this).data('user-id');
                    let user_name = $(this).data('user-name');
                    //$user_search_target.val(user_id);
                    user_search_target.value = user_id;
                    user_search_target.dispatchEvent(new Event('change', {'bubbles':true}));
                    //$(".js-user-search").val(user_name);
                    $user_search_target_name.val(user_name);
                    $user_search_result.hide();
                    $user_search_result.empty();
                }).appendTo($user_search_result);
                $user_search_result.show();
            });
    
        }, function(error){
            console.log(error);
        });
    }

    function seller_subscription_fetch(){

        seller = document.querySelector('#seller');
        subscription_title = document.querySelector('#subscription_title');
        csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        let subscription = document.querySelector('#subscription');
        if(!seller || !seller.value || subscription == null){
            return;
        }
        subscription_options.data.seller = seller.value;
        subscription_options.data.csrfmiddlewaretoken = csrfmiddlewaretoken.value;
        ajax_api.ajax(subscription_options).then(function(response){
            if(!response.succeed){
                return;
            }
            subscription.value = response.subscription;
            subscription.checked = true;
            let subscription_label = document.querySelector('#subscription-label');
            subscription_label.innerHTML = response.name;
            subscription_title.value = response.name;
        }, function(error){
            console.log(error);
        });
    }

    function init(){
        $user_search_result = $('#user-search-result');
        $user_search_target = $($user_search_result.data('target'));
        user_search_target = document.querySelector($user_search_result.data('target'));
        $user_search_target_name = $($user_search_result.data('target-name'));
        subscription_seller = document.querySelector('.js-subscription-seller');
        let $editable_inputs = $('input.js-editable');
        $editable_inputs.removeClass('editable').prop('disabled', true);;
        $('#form-controls').hide();
        $('.js-edit-form').on('click', function(event){
            let ctx = $($(this).data('target'));
            $(this).addClass('disabled');
            activate_editable_inputs(ctx);
            $('#form-controls').show();
        });
    
        $('.js-form-edit-cancel').on('click', function(event){
            event.preventDefault();
            let ctx = $($(this).data('target'));
            let hide_el = $($(this).data('hide'));
            hide_el.hide();
            $('.js-edit-form').removeClass('disabled');
            deactivate_editable_inputs(ctx);
        });
        
        if(subscription_seller){
            subscription_seller.addEventListener('change', seller_subscription_fetch);
        }
        
        $('.js-user-search').on('keyup', function(event){
            event.stopPropagation();
            query = $(this).val().trim();
            if(query.length == 0 ){
                return;
            }
            search_options.data.search = query
            if(scheduled_query){
                clearTimeout(scheduled_query);
            }
            scheduled_query = setTimeout(userSearch, query_delay, search_options);
        });
        
    }

    function get_user(){
        return user;
    }

    function get_username(){
            
        return user_available ?  user.username : "";
    }

    function get_last_login(){
        return user_available ?  user.last_login : "";
    }
    return {
        init : init,
        set_callback : function (func) {
            callback = func;
        },
        get_user : get_user,
        get_username : get_username,
        get_last_login : get_last_login,

        get_user_id : function(){
            return user_available ?  user.user_id : -1;
        },
        is_initialised : function(){
            return user_available;
        }
    }
    
});


define('commons',['ajax_api', 'tag_api', 'vendor/js.cookie', 'filters'], 
function(ajax_api, tag_api,Cookies, Filter) {
    'use strict';
    const FETCH_PRODUCT_IMAGE_URL = "/api/fetch-images/";
    const FETCH_BRANDS_URL = "/api/fetch-brands/";
    const FETCH_CATEGORIES_URL = "/api/fetch-categories/";
    const FETCH_PRODUCT_TYPES_URL = "/api/fetch-product-types/";
    const HTTP_URL_REGEX = RegExp('^(http:|https:|www\.)*');
    const IMAGE_FILE_INPUT_NAME = "images";
    const CAMPAIGN_IMAGE_FILE_INPUT_NAME = "image";
    let fileUpload;
    let productManager;
    let campaignManager;
    let mailcampaignManager;
    let highlightManager;
    let offlineOrderManager;
    let AVAILABILITY_ON_DEMAND = 1;
    let CAMPAIGN_TYPE_REPEAT_WEEKLY = 0, CAMPAIGN_TYPE_REPEAT_MONTHLY = 1,  CAMPAIGN_TYPE_REPEAT_ONCE = 2;
    
    let order_status_container;
    let order_payment_option_container;
    let order_status = [];
    let filter_form;

    function is_http_url(url){
        return HTTP_URL_REGEX.test(url);
    }

    function clear_uploaded_files(){
        let files_container = document.querySelector('.file-list');
        let input_files = document.querySelector('#files');
        input_files.value = null;
        while(files_container.firstChild){
            files_container.removeChild(files_container.firstChild);
        }
        $('.js-uploaded-files-clear').hide();
    }
    function show_preview(files) {
        let files_container = document.querySelector('.file-list');
        let li;
        let img;
        while(files_container.firstChild){
            files_container.removeChild(files_container.firstChild);
        }
        console.log("files : ", files);
        let f;
        for(let i = 0; i < files.length; i++){
            f = files[i];
            li = document.createElement('li');
            img = document.createElement('img');
            img.src = URL.createObjectURL(f);
            img.height = 60;
            files_container.appendChild(li);
            img.onload = function(){
                URL.revokeObjectURL(img.src);
            };
            li.classList.add('file-entry');
            li.appendChild(img);
            const info = document.createElement('span');
            info.innerHTML = f.name + " : " + f.size + ' bytes';
            li.appendChild(info);
        }
    }

    function onDragInit(){
        let droppedFiles;
        let dragarea = document.querySelector('.drag-area');
        if(!dragarea){
            console.log("no drag-area could be found");
            return;
        }
        let $form = $('#' + dragarea.dataset.form);
        $('.drag-area').on('drag dragstart dragend dragover dragenter drop', function(e){
            e.preventDefault();
            e.stopPropagation();
        }).on('dragover dragenter', function(){
            dragarea.classList.add('on-drag');
        }).on('dragleave dragend drop', function(){
            dragarea.classList.remove('on-drag');
        }).on('drop', function(e){
            droppedFiles = e.originalEvent.dataTransfer.files;
            let input_files = document.querySelector('#files');
            console.log("Droped file : ", droppedFiles);
            console.log("Input file : ", input_files.files);
            input_files.files = droppedFiles;
            console.log("Input file 2 : ", input_files.files);
            show_preview(droppedFiles);
            $('.js-uploaded-files-clear').show();
            console.log("Files dropped : %s", droppedFiles.length);

        });
        $('.js-uploaded-files-clear').on('click', clear_uploaded_files);
    }

    function onDropHandler(event){
        event.preventDefault();
        let files = [];
        event.dataTransfer = event.originalEvent.dataTransfer;
        if(event.dataTransfer.items){
            let items = event.dataTransfer.items;
            for(let i = 0; i < items.length; i++){
                if(items[i].kind === 'file'){
                    let file = items[i].getAsFile();
                    fileUpload.addFile(file);
                }
            }
        }else{
            let files = event.dataTransfer.files;
            //fileUpload.setFiles(files);
            for(let i = 0; i < files.length; i++){
                //let file = files[i]
                fileUpload.addFile(files[i]);
            }
        }
        $('.drag-area').removeClass('on-drag');
    }


    function onDragOverHandler(event){
        event.preventDefault();
    }

    function onDragStartHandler(event) {
        $('.drag-area').addClass('on-drag');
        
    }
    function onDragEndHandler(event) {
        $('.drag-area').removeClass('on-drag');
        
    }

    function uploadFiles(form, files) {
        let formData = new FormData(form);
        files.forEach(function(file, index){
            formData.append("file_" + index, file, file.name);
        });
        $(form).serializeArray().forEach(function(input, index){
            formData.append(input.name, input.value);
        });
        let options = {
            url : $(form).attr('action'),
            type: 'POST',
            enctype : 'multipart/form-data',
            data : formData,
            processData : false,
            cache : false,
            contentType : false
        };
        ajax_api.ajax(options, false).then(function(response){

        }, function(reason){

        });
        
    }

    function removeChildren(element){
        if(!element){
            return;
        }
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }

    function populate_catergories(data){
        let element = document.getElementById('category');
        if (!element || !data || !data.entries) {
            return;
        }
        removeChildren(element);
        let entries = data.entries;
        entries.forEach((e,i) =>{
            element.appendChild(tag_api.create_tag({'element':'option','options':{
                'value': e.id,
                'innerText': e.name + '-' + e.display_name
            }}));
        });
    }
    function populate_brands(data){
        let element = document.getElementById('brand');
        if (!element || !data || !data.entries) {
            return;
        }
        removeChildren(element)
        let entries = data.entries;
        entries.forEach((e,i) =>{
            element.appendChild(tag_api.create_tag({'element':'option','options':{
                'value': e.id,
                'innerText': e.display_name
            }}));
        });
    }
    function populate_product_types(data){
        let element = document.getElementById('product-type');
        if (!element || !data || !data.entries) {
            return;
        }
        removeChildren(element);
        let entries = data.entries;
        entries.forEach((e,i) =>{
            let input = tag_api.create_tag({'element': 'input','options':{
                'cls': 'product-type-input',
                'type': 'radio',
                'name': 'product_type',
                'value': e.id,
                'data-type-uuid': e.type_uuid,
                'id': 'p_type-' + e.id
            }});
            input.addEventListener('change', update_attrs_from_type);
            let label = tag_api.create_tag({'element': 'label', 'options': {
                'htmlFor': 'p_type-' + e.id,
                'innerText': e.display_name
            }});
            element.appendChild(tag_api.create_tag({'element': 'span', 'options':{
                'cls': 'padding',
                'children': [input, label]
            }}));
        });
    }
    let ImageManager = (function(){
        function ImageManager(form, drag_area_selector){
            this.form = form;
            this.supported_formats = ['jpg', 'jpeg', 'png', 'webp'];
            this.input_files;
            this.droppedFiles = [];
            this.drag_area_selector = drag_area_selector;
        }
        ImageManager.prototype.init = function(){
            let self = this;
            let drag_area_selector = this.drag_area_selector || ".drag-area";
            this.drag_areas = document.querySelectorAll(this.drag_area_selector);
            if(!this.drag_areas){
                return;
            }
            this.input_files = document.querySelectorAll('.files-upload-input');
            if(!this.input_files){
                return;
            }
            $(drag_area_selector).on('drag dragstart dragend dragover dragenter drop', function(e){
                e.preventDefault();
                e.stopPropagation();
            }).on('dragover dragenter', function(){
                this.classList.add('on-drag');
            }).on('dragleave dragend drop', function(){
                this.classList.remove('on-drag');
            }).on('drop', function(e){
                let file_input = document.getElementById(this.dataset.input);
                if(file_input){
                    let dtFiles = e.originalEvent.dataTransfer.files;
                    for(const file of dtFiles){
                        if(self.find(file) != undefined){
                            console.log("File already present ...");
                        }else{
                            self.droppedFiles.push(file);
                        }
                    }
                    file_input.files = dtFiles;
                    this.classList.add('active');
                    self.imagesPreview(this);
                }
            });
            $('.files-upload-input').on('change', function(e){
                let drag_area = document.getElementById(this.dataset.dragarea);
                if(this.files){
                    drag_area.classList.remove('active');
                }
                self.imagesPreview(drag_area);
            });
            $('.js-uploaded-files-clear').on('click', function(event){
                let files_container = document.getElementById(this.dataset.target);
                
                while(files_container.firstChild){
                    files_container.removeChild(files_container.firstChild);
                }
                let input = document.getElementById(files_container.dataset.input);
                let drag_area = document.getElementById(this.dataset.dragarea);
                input.files = null;
                let entry = document.createElement('div');
                let span = document.createElement('span');
                span.innerText = "No images";
                entry.appendChild(span);
                files_container.appendChild(entry);
                drag_area.classList.remove('active');
                self.droppedFiles.length = 0;
            });
        }
        ImageManager.prototype.find = function(file){
            return this.droppedFiles.find(f => f.name == file.name);
        }
        ImageManager.prototype.getDroppedFiles = function(){
            return this.droppedFiles;
        }
        ImageManager.prototype.imagesPreview = function(drag_area){
            let entry;
            let img;
            let input = document.getElementById(drag_area.dataset.input);
            let files_container = drag_area.querySelector('.file-list');
            while(files_container.firstChild){
                files_container.removeChild(files_container.firstChild);
            }
            let f;
            for(let i = 0; i < this.droppedFiles.length; i++){
                f = this.droppedFiles[i];
                entry = document.createElement('div');
                img = document.createElement('img');
                img.src = URL.createObjectURL(f);
                img.classList.add('img-responsive');
                img.onload = function(){
                    URL.revokeObjectURL(img.src);
                };
                entry.classList.add('file-entry','col-m-2','col-2');
                entry.appendChild(img);
                const info = document.createElement('span');
                info.innerHTML = f.name + " : " + Math.ceil(f.size/1024) + ' KB';
                info.classList.add('padding');
                //entry.appendChild(info);
                files_container.appendChild(entry);
            }
            $('.js-uploaded-files-clear', drag_area).show();
        };

        ImageManager.prototype.clearImages = function(drag_area){
            let files_container = document.querySelector('.file-list', drag_area);
            if(!files_container){
                return;
            }
            while(files_container.firstChild){
                files_container.removeChild(files_container.firstChild);
            }
            let input_file = document.getElementById(drag_area.dataset.input);
            input_file.files = null;
            let entry = document.createElement('div');
            let span = document.createElement('span');
            span.innerText = "No images";
            entry.appendChild(span);
            files_container.appendChild(entry);
            drag_area.classList.remove('active');
        };
        ImageManager.prototype.clear = function(){
            if(this.input_files){
                this.input_files.forEach(function(v,i){
                    v.files = null;
                });
            }
            this.droppedFiles.length = 0;
        }

        return ImageManager;
    })();

    


    let MailCampaignManager = (function(){
        function MailCampaignManager() {
            this.images = [];
            this.form = undefined;
            this.formData = undefined;
            this.input_file = undefined;
            this.input_files;
            this.drag_area = undefined;
            this.files_container = undefined;
            this.send_btn = undefined;
            this.clear_uploaded_files_btn = undefined;
            this.campaign_container = undefined;
            this.campaign_link = undefined;
            this.supported_formats = ['jpg', 'jpeg', 'png', 'webp'];
            
        };
        MailCampaignManager.prototype.init = function(){
            let self = this;
            this.form = document.querySelector('#mail-campaign-upload-form') || document.querySelector('#mail-campaign-update-form');
            if(this.form == null ){
                return;
            }
            this.imageManager = new ImageManager(this.form);
            this.imageManager.init();
            this.campaign_container = document.querySelector('#created-producted-link');
            this.campaign_link = document.querySelector('#created-producted-link a');

            this.validators = [];
            
            $(this.form).on('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                self.formData = new FormData(self.form);
                let productImages = self.imageManager.getDroppedFiles();
                if(productImages.length == 0 && !self.is_update_form()){
                    notify({'content': "No images", 'level': 'warn'});
                    return;
                }
                self.formData = new FormData(self.form);
                productImages.forEach(f =>{
                    self.formData.append(CAMPAIGN_IMAGE_FILE_INPUT_NAME, f);
                });
                
                self.upload();
            });

            console.log("Mail Campaign initialized");

        };

        MailCampaignManager.prototype.clear = function(){
            document.querySelector('#description-counter').innerText = '0';
            this.imageManager.clear();
            this.campaign_link.href = '';
            this.campaign_link.innerText = '';
            this.campaign_container.style.display = 'none';
        }

        MailCampaignManager.prototype.is_update_form = function(){
            return this.form != null ? this.form.id == 'mail-campaign-update-form' : false;
        }



        MailCampaignManager.prototype.onUploadResponse = function(data){
            if(!data.success){
                
                return;
            }
            this.clear();
            this.campaign_link.href = data.url;
            this.campaign_link.innerText = data.url_text + " : " + data.name;
            this.campaign_container.style.display = 'flex';
        };

        MailCampaignManager.prototype.upload = function(){
            let self = this;
            let form_is_valid = this.validate();
            if(!form_is_valid){
                console.log("Campaign form is invalid");
                return;
            }

            let url = this.is_update_form() ? '/api/mailing/update-mail-campaign/' + this.form.dataset.campaign + '/' : '/api/mailing/create-mail-campaign/';

            let options = {
                url : url,
                type: 'POST',
                enctype : 'multipart/form-data',
                data : this.formData,
                dataType : 'json',
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                let msg = {
                    content : response.message,
                    level : response.created
                }
                notify(msg);
                self.onUploadResponse(response);
                

            }, function(reason){
                console.error("Files could not be uploaded.");
                console.error(reason);
            });
        };


        MailCampaignManager.prototype.validate = function(){
            let name = document.querySelector('#name');
            let key = document.querySelector('#key');
            let cta = document.querySelector('#cta');
            let target_link = document.querySelector('#target_link');
            let headerText = document.querySelector('#headerText');
            let bodyText = document.querySelector('#bodyText');
            let description = document.querySelector('#description');

            let fields = [name, key, cta, target_link, headerText, bodyText, description];
            
            let is_valid = true;

            is_valid = fields.every((f) => f != null);
            if(!fields.every((f) => f != null)){
                return false;
            }

            fields.forEach(f =>{
                if(f.value == ""){
                    is_valid = false;
                    f.classList.add('warn');

                }else{
                    f.classList.remove('warn');
                }
            });
            return is_valid;
        };

        return MailCampaignManager;

    })();



    let ProductManager = (function(){
        function ProductManager() {
            this.images = null;
            this.form = undefined;
            this.formData = undefined;
            this.input_file = undefined;
            this.drag_area = undefined;
            this.files_container = undefined;
            this.send_btn = undefined;
            this.clear_uploaded_files_btn = undefined;
            this.created_product_container = undefined;
            this.created_product_link = undefined;
            this.on_demand_url = undefined;
            this.supported_formats = ['jpg', 'jpeg', 'png', 'webp'];
        };
        ProductManager.prototype.init = function(){
            let self = this;
            this.form = document.querySelector('#product-upload-form') || document.querySelector('#product-update-form');
            
            this.csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
            if(this.form == null || this.csrfmiddlewaretoken == null){
                return;
            }
            this.imageManager = new ImageManager(this.form);
            this.imageManager.init();
            this.created_product_container = document.querySelector('#created-product-link');
            this.created_product_link = document.querySelector('#created-product-link a');
            this.files_container = document.querySelector('.file-list');
            this.on_demand_url = document.querySelector('#on-demand-url');
            let scheduled_at = document.getElementById('scheduled_at');
            let schedules = document.querySelectorAll('.schedule');
            schedules.forEach(function(schedule){
                ["input","keyup","change"].forEach(function(eventName){
                    schedule.addEventListener(eventName,function(event){
                        self.validateSchedule(schedule);
                    });
                });
            });
            $("#product_url").on('change keyup',function(event){
                toggle_fetch_img_btn(!is_http_url(this.value));
            });

            $('#fetch-img-btn').on('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                this.disabled = true;
                let product_url = document.getElementById("product_url").value;
                let alt_filter = document.getElementById("alt_filter").value;
                let csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]').value;
                let csrftoken = Cookies.get("csrftoken");
                let formData = new FormData();
                formData.append("product_url", product_url);
                formData.append('alt_filter', alt_filter);
                formData.append("csrfmiddlewaretoken", csrfmiddlewaretoken);
                image_fetch(formData, on_images_fetched);

            });
            
            $('.js-input-availability').on('change', function(e){
                try {
                    self.on_demand_url.classList.toggle('hidden', !(parseInt(this.value) == AVAILABILITY_ON_DEMAND));
                } catch (error) {
                    
                }
            });
            $('input.product-type-input').on('change', update_attrs_from_type);
            this.validators = [this.validateAvailability, this.validateBrand, this.validateCategory, 
                                this.validateDescriptions, this.validateGender, this.validateName, 
                                this.validateProductType, this.validateVariants, this.validateImages];
            

            
            $(this.form).on('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                let productImages = self.imageManager.getDroppedFiles();
                if(productImages.length == 0 && !self.is_update_form()){
                    notify({'content': "No images", 'level': 'warn'});
                    return;
                }
                self.formData = new FormData(self.form);
                productImages.forEach(f =>{
                    self.formData.append(IMAGE_FILE_INPUT_NAME, f);
                }); 
                // console.log("FormData Dumps")
                // for(const pair of self.formData.entries()){
                //     console.log(`${pair[0]}, ${pair[1]}`);
                // }
                // console.log("FormData Dumps End")
                //return;
                self.upload();
            });
            document.querySelectorAll('.fetch-btn').forEach((e,i)=>{
                e.addEventListener('click', function(event){
                    event.stopPropagation();
                    event.preventDefault();
                    if(this.dataset.target == "brand"){
                        self.onPropertiesFetch(FETCH_BRANDS_URL, populate_brands);
                    }else if(this.dataset.target == "category"){
                        self.onPropertiesFetch(FETCH_CATEGORIES_URL, populate_catergories);
                    }else if(this.dataset.target == "product-type"){
                        self.onPropertiesFetch(FETCH_PRODUCT_TYPES_URL, populate_product_types);
                    }
                });
            });


            console.log("ProductManager initialized");

        };

        ProductManager.prototype.clear = function(){
            
            this.imageManager.clear();
        }

        ProductManager.prototype.is_update_form = function(){
            return this.form != null ? this.form.id == 'product-update-form' : false;
        }

        ProductManager.prototype.validate = function(){
            // if(this.validators){
            //     return this.validators.every((f)=>f());
            // }
            return true;
        };

        ProductManager.prototype.validateSchedule = function(scheduled_el){
            let is_valid = true;
            if(scheduled_el && scheduled_el.value.length){
                let NOW = Date.now()
                let scheduled_at_Date = new Date(scheduled_el.value);
                if(scheduled_at_Date < NOW){
                    scheduled_el.classList.add("error");
                    is_valid = false;
                }else{
                    scheduled_el.classList.remove("error");
                }
            }
            return is_valid;
        };

        

        ProductManager.prototype.onImagesChanged = function(){
            this.drag_area.classList.toggle('active', this.images && (this.images.length > 0));
        };

        ProductManager.prototype.validateImages = function(){
            let images = this.imageManager.getDroppedFiles();
            if(!images  || !images.length){
                console.log(" images errors");
                return false;
            }
            return true;
        };

        ProductManager.prototype.onUploadResponse = function(data){
            
            if(!data.success){
                console.log("responseData : ", data);
                console.warn(data.errors);
                for(const [k,v] of Object.entries(data.errors)){
                    if(k == "__all__"){
                        let __all__ = document.getElementById(k);
                        __all__.classList.remove("hidden");
                        let items = [];
                        v.forEach((e)=>{
                            items.push(tag_api.create_tag({
                                element: "li",
                                options:{
                                    innerText: e
                                }
                            }));
                        });
                        let ul = tag_api.create_tag({
                            element: "ul",
                            options:{
                                cls:"errorlist",
                                children: items
                            }
                        });
                        __all__.appendChild(ul);
                        
                    }else{
                        document.querySelector("." + k).classList.add("error");
                    }
                }
                return;
            }
            this.created_product_link.href = data.url;
            this.created_product_link.innerText = data.name;
            this.created_product_container.style.display = 'flex';
            if(!this.is_update_form()){
                this.clear();
            }
        };

        ProductManager.prototype.onPropertiesFetch = function(url, callback){
            let self = this;
            let csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
            let formData = new FormData();
            formData.append('csrfmiddlewaretoken', csrfmiddlewaretoken.value);
            let options = {
                url : url,
                type: 'POST',
                dataType : 'json',
                data : formData,
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                let msg = {
                    content : response.message,
                    level : response.success
                }
                notify(msg);
                callback(response);

            }, function(reason){
                console.error("Error on category fetch.");
                console.error(reason);
            });
        }

        ProductManager.prototype.upload = function(){
            let self = this;
            let form_is_valid = this.validate();
            if(!form_is_valid){
                console.log("Product form is invalid");
                return;
            }
            let url = this.is_update_form() ? '/api/update-product/' + this.form.dataset.product + '/' : '/api/create-product/';
            
            let options = {
                url : url,
                type: 'POST',
                enctype : 'multipart/form-data',
                data : this.formData,
                dataType : 'json',
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                let msg = {
                    content : response.message,
                    level : response.success
                }
                notify(msg);
                self.onUploadResponse(response);
                
                

            }, function(reason){
                console.error("Files could not be uploaded.");
                console.error(reason);
            });
        };

        return ProductManager;

    })();

    let OfflineManager = (function (){
        function OfflineManager(){
            this.attrs_inputs = [];
            this.total_form = 0;
            this.input_max_length = 32;
            this.replace_pattern = /\d+/g;
            this.form_TOTAL_FORMS = 0;
            this.form_INITIAL_FORMS = 0;
            this.form_MIN_NUM_FORMS = 0;
            this.form_MAX_NUM_FORMS = 0;
            this.form = null;
        }
        //this.form = $('#form-attrs-management');
        
        OfflineManager.prototype.init = function(){
        let self = this;
        this.form = document.getElementById("offline-order-form");
        if(! this.form){
            return;
        }
        let total = document.getElementById('total');
        let amount = document.getElementById('amount');
        let solded_price = document.getElementById('solded_price');
        let shipping_price = document.getElementById('shipping_price');
        $('#amount,#solded_price,#shipping_price').on('keyup change', function(event){
            try {
                total.value = parseFloat(amount.value) + parseFloat(solded_price.value) + parseFloat(shipping_price.value);
                total.classList.remove('error');
            } catch (error) {
                total.value = 0;
                total.classList.add('error');
            }
        });

        this.form.addEventListener("submit",function(event){
            event.stopPropagation();
            event.preventDefault();
            let formData = self.prepareFormData();
            if(formData != null){
                self.create_order(formData);
            }
        });
        console.log("OfflineOrderManaher installed");
    };
    
    OfflineManager.prototype.prepareFormData = function(){
        let that = this;
        let variant_inputs = document.querySelectorAll('input.js-offline-item');
        variant_inputs = Array.from(variant_inputs).filter(input => input.value != "");
        
        let formData = new FormData(this.form);
        let form_prefix;
        let total_price = 0;
        let total_form = 0;
        if(variant_inputs.length == 0){
            notify({'level':'warning', 'content': "No Product added for this order"});
            return formData;
        }
        variant_inputs.forEach(function(input,index, parent){
            form_prefix = `form-${total_form}-`;
            total_price = input.value * input.dataset.price;
            formData.append(form_prefix+"product",input.dataset.product);
            formData.append(form_prefix+"quantity",input.value);
            formData.append(form_prefix+"available_quantity",input.dataset.available_quantity);
            formData.append(form_prefix+"price",input.dataset.price);
            formData.append(form_prefix+"promotion_price",input.dataset.promotion_price);
            formData.append(form_prefix+"total_price", parseInt(input.value) * parseInt(input.dataset.price));
            total_form++;
        });
        formData.append("form-TOTAL_FORMS", total_form);
        formData.append("form-INITIAL_FORMS", total_form);
        formData.append("form-MIN_NUM_FORMS", total_form);
        formData.append("form-MAX_NUM_FORMS", total_form);

        return formData;
    };

    OfflineManager.prototype.clear = function(){
        this.total_form = 0;
        let variant_inputs = document.querySelectorAll("input.js-offline-item:not([value=''])");
        variant_inputs.forEach(function(input,index, parent){
            input.value = "";
        });
    };

    OfflineManager.prototype.create_order = function(formData){
        let self = this;
        let options = {
            url : "/api/create-offline-order/",
            type: 'POST',
            enctype : 'multipart/form-data',
            data : formData,
            dataType : 'json',
            processData : false,
            cache : false,
            contentType : false
        };
        ajax_api.ajax(options).then(function(response){
            let msg = {
                content : response.message,
                level : response.created
            }
            notify(msg);
            let link = document.querySelector("a#order-link");
            link.href = response.url;
            link.classList.toggle('hidden');
            self.clear();

        }, function(reason){
            console.error("Files could not be uploaded.");
            console.error(reason);
            notify({level:"error", content: reason.message});
        });
    };

    OfflineManager.prototype.incremente_management_form = function(){
        this.total_form = this.total_form + 1;
        this.form_TOTAL_FORMS = this.total_form;
        this.form_MIN_NUM_FORMS  = this.total_form;
        this.form_MAX_NUM_FORMS = this.total_form;
    };

    OfflineManager.prototype.decremente_management_form = function(){
        this.total_form = this.total_form - 1;
        this.form_TOTAL_FORMS = this.total_form;
        this.form_MIN_NUM_FORMS  = this.total_form;
        this.form_MAX_NUM_FORMS = this.total_form;
    };

    return OfflineManager;
})();

    let FileUpload = (function(){
        function FileUpload(){
            this.files = [];
            this.form = undefined;
            this.formData = undefined;
            this.clean = true;
            this.drag_area = $('.drag-area');
            this.file_list_container = $('.file-list');
            this.file_entries = {};
            this.empty_element = $('.no-data', this.file_list_container);
            this.send_btn = $('.js-send-file-upload-btn');
            this.clear_btn = $('.js-file-list-clear-btn');
            //this.init();
        };

        FileUpload.prototype.init = function(){
            let that = this;
            this.clear_btn.on('click', this.clear.bind(this));

            $('.drag-area')
                .on('drop', onDropHandler)
                .on('dragover', onDragOverHandler)
                .on('dragenter', onDragStartHandler)
                .on('dragleave', onDragEndHandler)
        };

        FileUpload.prototype.clear = function() {
            this.files = [];
            this.formData = undefined;
            this.form = undefined;
            this.clean = true;
            //$('.file-entry', this.file_list_container).remove();
            this.file_list_container.empty().append(this.empty_element);
            this.drag_area.removeClass('non-empty');
            this.send_btn.addClass('disabled').prop('disabled',true);
            this.clear_btn.addClass('hidden');
        };

        FileUpload.prototype.isClean = function() {
            return this.clean;
        };

        FileUpload.prototype.setForm = function(form){
            this.form = form;
            this.clean = false;
            return this;
        };

        FileUpload.prototype.setFiles = function(files){
            this.files = files;
            this.clean = false;
            return this;
        };

        FileUpload.prototype.addFile = function(file){
            if(this.files.some(f => f.name == file.name)){
                console.warn("A file with the same name already exists.")
                return this;
            }
            let that = this;
            this.files.push(file);
            let li = $('<li />',{
                id:"file-" + that.files.length,
                'class' : 'file-entry',
                'title': file.name,
            });
            let entry_text = $('<span />', {
                text: file.name
            });
            let entry_remove_btn = $('<button />', {
                class: 'mat-button mat-button-text',
                type: 'button'
            }).append($('<i />', {
                class: 'fas fa-times icon'
            }));
            entry_remove_btn.on('click', function(event){
                event.preventDefault();
                event.stopPropagation();
                that.removeFile([file.name]);
                li.remove();
            });
            li.append(entry_text, entry_remove_btn).appendTo(that.file_list_container);
            $('.no-data', that.file_list_container).remove();
            this.drag_area.addClass('non-empty');
            this.send_btn.removeClass('disabled').prop('disabled',false);
            this.clear_btn.removeClass('hidden');
            this.clean = false;
            return this;
        };

        FileUpload.prototype.removeFile = function(fileNames){
            let old_length = this.files.length;
            this.files = this.files.filter(f => !fileNames.includes(f.name));
            if(this.files.length != old_length && this.files.length < old_length){

                if(this.files.length == 0){
                    this.file_list_container.append(this.empty_element);
                    this.drag_area.removeClass('non-empty');
                    this.send_btn.addClass('disabled').prop('disabled',true);
                    this.clear_btn.addClass('hidden');
                }
                this.clean = false;
            }else{
                console.log("files : %s not removed", fileNames);
                
            }
            
            return this;
        };
        FileUpload.prototype.update = function(){
            if(this.isClean()){
                console.warn("FileUpload can not be updated. formData is already clean.");
                return;
            }
            if(!this.form || !this.files || this.files.length == 0){
                console.warn("FileUpload can not be updated. form or files are missing.");
                return;
            }
            this.formData = new FormData(this.form);
            let that = this;
            this.files.forEach(function(file, index){
                that.formData.append("file_" + index, file, file.name);
            });
            this.clean = true;
            /*
            $(form).serializeArray().forEach(function(input, index){
                formData.append(input.name, input.value);
            });
            */
        };

        FileUpload.prototype.canSend = function(){
            let formValid = typeof this.form != 'undefined';
            let filesValid = typeof this.files != 'undefined';

            return formValid && filesValid && this.files.length > 0;
        };

        FileUpload.prototype.getForm = function() {
            return this.form;
        };

        FileUpload.prototype.getFiles = function() {
            return this.files;
        }

        FileUpload.prototype.getFormDate = function() {
            return this.formData;
        }

        FileUpload.prototype.upload = function(){
            if(!this.canSend()){
                console.error("Files can not be sent. Please check your files form. Files or form are missing.");
                return;
            }
            if(typeof ajax_api.ajax === 'undefined'){
                let errorMsg = "can not upload files. ajax funtion is not defined";
                console.error(errorMsg);
                throw new Error(errorMsg);
            }
            let that = this;
            let options = {
                url : $(this.form).attr('action'),
                type: 'POST',
                enctype : 'multipart/form-data',
                data : this.formData,
                processData : false,
                cache : false,
                contentType : false
            };
            ajax_api.ajax(options).then(function(response){
                let msg = {
                    content : response.message,
                    level : response.status === 'OK'
                }
                notify(msg);
                fileUpload.clear();
                

            }, function(reason){
                console.error("Files could not be uploaded.");
                console.error(reason);
                fileUpload.clear();
            });

        };

        return FileUpload;
    })();

    


    function regroupe_attrs(attribute_list){
        let keySet = new Set();
        let attrs_map = {};
        attribute_list.forEach((o)=>{
            keySet.add(o.name);
        });
        keySet.forEach((name)=>{
            attrs_map[name] = attribute_list.filter(o => o.name == name).sort((first, second) =>{
                if (first.value < second.value) {
                    return -1
                }
                if(first.value > second.value){
                    return 1;
                }
                return 0;
            });
        });
        return attrs_map;
    }

    function update_attrs(attrs_mapping){
        let attributes_container = document.querySelector('#attributes-container');
        while(attributes_container.firstChild){
            attributes_container.removeChild(attributes_container.firstChild);
        }
        let i = 0;
        for(const [key,value] of Object.entries(attrs_mapping)){
            let div = document.createElement('div');
            let span = document.createElement('span');
            let tmp_span = document.createElement('span');
            let ul;
            let label = document.createElement('label');
            let tmp_label;
            let tmp_input;
            let select = document.createElement('select');
            let opt = document.createElement('option');
            let li = document.createElement('li');
            let li_tags = [];
            tmp_span.innerText = `Select a ${key}`;
            opt.innerText = `Select a ${key}`;
            li.appendChild(tmp_span);
            li_tags.push(li);
            //ul.appendChild(li);
            select.appendChild(opt);
            value.forEach((o)=>{
                li = document.createElement('li');
                tmp_label = tag_api.create_tag({'element': 'label','options':{
                    'htmlFor': 'attributes-' + i + "-" + o.id,
                    'innerText': o.value
                }});
                tmp_input = tag_api.create_tag({'element': 'input', 'options': {
                    'type': 'checkbox',
                    'name': 'attributes',
                    'value': o.id,
                    'id': 'attributes-' + i + "-" + o.id
                }});
                tmp_span = tag_api.create_tag({'element': 'span','options':{
                    'cls': 'padding',
                    'children': [tmp_input, tmp_label]
                }});
                li = tag_api.create_tag({'element': 'li','options':{
                    'children': [tmp_span]
                }});
                li_tags.push(tag_api.create_tag({'element': 'li','options':{
                    'children': [tmp_span]
                }}));
                //ul.appendChild(li);
                //opt = document.createElement('option');
                //opt.value = o.id;
                //opt.innerText = o.value;
                //select.appendChild(opt);
            });
            //select.name = 'attributes';
            //select.id = select.name + "-" + i;
            //select.multiple = true;
            //label.htmlFor = select.id;
            //label.innerText = key.toUpperCase();
            i++;
            ul = tag_api.create_tag({'element': 'ul', 'options':{
                'cls': 'attr-list',
                'children': li_tags
            }});
            div.appendChild(label);
            div.appendChild(ul);
            //div.appendChild(select);
            div.classList.add('attr-list-container');
            attributes_container.appendChild(div);
            
        }

    }

    function update_attrs_from_type(){
        let input = document.querySelector('input.product-type-input:checked');
        let option = {
            type:'GET',
            method: 'GET',
            dataType: 'json',
            url : '/api/attrs-from-type/' + input.dataset.typeUuid + '/'
        }
        ajax_api.ajax(option).then(function(response){
            let attributes = response.attributes;
            let attrs_mapping = regroupe_attrs(attributes);
            update_attrs(attrs_mapping);
        }, function(reason){
            console.error(reason);
        });
    }

    function input_check_max_limit(input){
        let $input = $(input);
        let limit = input.dataset['max-length']
        //let max_len = parseInt($input.data('max-length'));
        //let len = $input.val().length;
        let char_counter = document.getElementById(input.dataset.target);
        let target = $($input.data('target'));
        let max_len_reached = input.value.length > limit;
        input.classList.toggle('warning', max_len_reached);
        char_counter.classList.toggle('danger', max_len_reached);
        char_counter.innerText = input.value.length;
        //$input.toggleClass("warning", max_len_reached);
        //target.toggleClass("danger", max_len_reached).text(len);
    }


    $(document).ready(function(){
        fileUpload = new FileUpload();

        $('#file-upload-form').on('submit', function(event){
            event.preventDefault();
            event.stopPropagation();
            fileUpload.setForm(this);
            fileUpload.update();
            fileUpload.upload();
            //return false;
        });
        
    });

});
define('image_loader',[],function() {
    'use strict';

    var imageList = document.querySelectorAll('img[data-src]');
    const loadImages = (image) =>{
        image.setAttribute('src', image.getAttribute('data-src'));
        image.onload = () =>{
            image.removeAttribute('data-src');
        }
    };
    if ('IntersectionObserver' in window){
        const observer = new IntersectionObserver((items, observer) =>{
            items.forEach((item) =>{
                if(item.isIntersecting){
                    loadImages(item.target);
                    observer.unobserve(item.target);
                }
            })
        });
        imageList.forEach((img) =>{
            observer.observe(img);
        });
    }else{
        imageList.forEach((img) => {
            loadImages(img);
        });
    }
});
define('dashboard',['ajax_api'], function(ajax_api) {
    'use strict';
    var csrfmiddlewaretoken = undefined;
    var clear_sessions_option = {
        type:'POST',
        method: 'POST',
        dataType: 'json',
        url : '/api/clear-sessions/',
        data : {}
    };
    function clear_sessions(){
        clear_sessions_option.data = {'csrfmiddlewaretoken': csrfmiddlewaretoken.value};
        ajax_api.ajax(clear_sessions_option).then(
            function(response){
                var sessions_warning = document.querySelector('#session-warning');
                if(response.cleared){
                    var sessions_list = document.querySelector('#session-list');
                    sessions_warning.classList.remove('hidden');
                    if(sessions_list){
                        while(sessions_list.firstChild){
                            sessions_list.removeChild(sessions_list.firstChild);
                        }
                    }
                }else{
                    sessions_warning.classList.remove('hidden');
                }
            },
            function(error) {
                
            }
        );
    }

    function attach_click_event(){
        var session_clear_btn = document.querySelector('.js-clear-session-btn');
        if(session_clear_btn){
            console.log("attached click event for clear sessions");
            session_clear_btn.addEventListener('click', clear_sessions);
        }else{
            console.log("could not attached click event for clear sessions");
        }
    }
    var Group = (function(){
        function Group(){
            this.selected_permissions = {};
            this.group_users = {};
            this.add_selected_permissions_btn = {};
            this.add_selected_users_btn = {};
            this.remove_selected_permissions_btn = {};
            this.remove_selected_users_btn = {};
            
        };

        Group.prototype.init = function(){
            $('#add-selected-users').on('click', function(event){
                event.preventDefault();
                var $target = $($(this).data('target'));
                var $source = $($(this).data('source'));
                $('option:selected', $source).appendTo($target);
                $('option', $target).prop('selected', true).addClass('selected');

            });

            $('#add-selected-permissions').on('click', function(){
                var $target = $($(this).data('target'));
                var $source = $($(this).data('source'));
                $('option:selected', $source).appendTo($target);
                $('option', $target).prop('selected', true);

            });

            $('#remove-selected-users').on('click', function(){
                var $target = $($(this).data('target'));
                var $source = $($(this).data('source'));
                $('option:selected', $source).appendTo($target);
                $('option', $target).prop('selected', true).addClass('selected');

            });

            $('#remove-selected-permissions').on('click', function(){
                var $target = $($(this).data('target'));
                var $source = $($(this).data('source'));
                $('option:selected', $source).appendTo($target);
                $('option', $target).prop('selected', true).addClass('selected');

            });
        };
        return Group;
    })();


    var PermissionGroupManager = (function(){
        function PermissionGroupManager(){
            this.selected_permissions = {};
            this.group_users = {};
            this.add_selected_permissions_btn = {};
            this.add_selected_users_btn = {};
            this.remove_selected_permissions_btn = {};
            this.remove_selected_users_btn = {};
            
        };

        PermissionGroupManager.prototype.init = function(){
            /*
            $('#available-permission-list').on('click','li', function(event){
                event.preventDefault();
                var $target = $('#permission-list');
                var self = $(this);
                var $selected_permissions = $('#selected-permission-list');
                $selected_permissions.append($('<option/>', {'value': self.data('value'), 'selected': true, 'text': self.text()}));
                self.appendTo($target);
            });

            $('#permission-list').on('click','li', function(event){
                event.preventDefault();
                var $target = $('#available-permission-list');
                var self = $(this);
                $('#selected-permission-list option').filter(function(){
                    return this.value == self.data('value');
                }).remove();
                self.removeClass('active').appendTo($target);
            });


            $('#available-user-list').on('click','li', function(event){
                event.preventDefault();
                var $target = $('#user-list');
                var self = $(this);
                var $selected_users = $('#selected-user-list');
                $selected_users.append($('<option/>', {'value': self.data('value'), 'selected': true, 'text': self.text()}));
                self.appendTo($target);
            });

            $('#user-list').on('click','li', function(event){
                event.preventDefault();
                var $target = $('#available-user-list');
                var self = $(this);
                $('#selected-user-list option').filter(function(){
                    return this.value == self.data('value');
                }).remove();
                self.removeClass('active').appendTo($target);
            });
            */

        };

        return PermissionGroupManager;
    })();


    var JSFilter = (function(){
        function JSFilter(){
            console.log("creating JSFilter instance");
            this.init();
            console.log("JSFilter instance created");
        };

        JSFilter.prototype.init = function(){
            console.log("JSFilter instance initializing");
            $('.js-jsfilter-input, .js-list-filter').on('keyup', function(event){
                event.stopPropagation();
                var value = this.value.trim().toLowerCase();
                var target_container = this.getAttribute('data-target');
                var el = this.getAttribute('data-element');
                $(target_container + " " +  el).filter(function(){
                    $(this).toggle(this.innerHTML.toLowerCase().includes(value));
                });
            });

            console.log("JSFilter instance initialized");
        };
        return JSFilter;
    })();

    $(document).ready(function(){
        var permissionManager = new PermissionGroupManager();
        var jsfilter = new JSFilter();
        var group = new Group();
        csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        permissionManager.init();
        jsfilter.init();
        group.init();
        attach_click_event();
        $('.js-user-selector').on('click', 'li', function(){
            let target = $(this);
            $('#members').append($('<option/>', {'value': target.data('id'), 'selected': true, 'text': target.text()}));
            target.appendTo('#selected-members');
        });
        $('#selected-members').on('click', 'li', function(){
            let target = $(this);
            target.appendTo('.js-user-selector');
            $('#members option').filter(function(){
                return this.value == target.data('id');
            }).remove();
        });    
    });
});
requirejs.config({
    baseUrl :'/static/js/lib',
    paths:{
        vendor: '../vendors',
        editor: '../vendors/editor'
    },
    waitSeconds: 0
});

requirejs(['ajax_api', 'core', 'accounts', 'commons', 'image_loader', 'dashboard','editor_api'], function(ajax_api, core, accounts){
    accounts.init();
    console.log("JQuery version :", $().jquery);
});
define("main", function(){});

