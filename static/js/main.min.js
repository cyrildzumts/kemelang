/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define('vendor/js.cookie',factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

define('lang',['vendor/js.cookie'],function(Cookies) {
    'use strict';
    var lang_cookie = "";
    const LANGUAGE_KEY = 'django_language';
    const DEFAULT_LANGUAGE = "fr";
    var DEFAULT_PATH = {path: ""};
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
    }

    function get_lang(){
      const current_lang = $('#current-lang').val();
      return current_lang;
    }
    function change_language(element){
        var form = $('#lang-form');
        var $el = $(element);
        if($el.hasClass('active')||$el.hasClass('selected')){
            return;
        }
        var name = $('input[name="language"]', form);
        lang_cookie = $el.data('value');
        name.val(lang_cookie);
        //Cookies.set(LANGUAGE_KEY, lang_cookie, DEFAULT_PATH);
        form.submit();
    }
    $('.js-lang').on('click', function(event){
        change_language(this);
    });
    return {get_cookie: getCookie, get_lang: get_lang}
});
define('ajax_api',['lang'], function(Locale) {
    'use strict';
    /**
       * 
       * @param {*} options is a JSON defining the following data :
       * type - string
       * url - string
       * data - json
       * dataType - string
       * Example : 
       * type: 'POST',
         url : '/cart/add_to_cart/',
        data: {product_id: 102, quantity: 4},
        dataType: 'json'
  
        A future object is returned
    */

      function ajax_lang(options, debug){
        if(debug){
          console.debug("ajax_api options - ", options);
        }
        options.url = '/' + Locale.get_lang() + options.url;
        return new Promise(function(resolve, reject){
            $.ajax(options).done(resolve).fail(reject);
        });
      };

      function ajax(options, debug){
        if(debug){
          console.debug("ajax_api options - ", options);
        }
        return new Promise(function(resolve, reject){
            $.ajax(options).done(resolve).fail(reject);
        });
      };

      async function fetch_api(url='', init_option={}){
        const response = await fetch(url, init_option);
        return response.json();
      }

    return {'ajax_lang':ajax_lang, 'ajax' : ajax, 'fetch_api': fetch_api};
  });
define('accounts',['ajax_api','exports'], function(ajax_api, exports) {
    'use strict';
    let user = {};
    
    let user_available = false;
    let query_delay = 800;
    let scheduled_query = false;
    let $user_search_result = undefined;
    let $user_search_target = undefined;
    let user_search_target = undefined;
    let $user_search_target_name = undefined;
    let callback;
    let query = "";
    let seller;
    let subscription_seller;
    let subscription_title;
    let csrfmiddlewaretoken;
    let options = {
        url:'/api/current-user/',
        type: 'GET',
        data : {},
        dataType: 'json'
    };
    let search_options = {
        url:'/api/user-search/',
        type: 'GET',
        data : {'search': query},
        dataType: 'json'
    };

    let subscription_options = {
        url:'/api/sellers/subscription/',
        type: 'POST',
        data : {'seller': seller, 'csrfmiddlewaretoken': ""},
        dataType: 'json'
    }

    function activate_editable_inputs(context){
        let $editable_inputs = $('input.js-editable', context);
        $editable_inputs.addClass('editable').prop('disabled', false);
    
    }
    
    function deactivate_editable_inputs(context){
        let $editable_inputs = $('input.js-editable', context);
        $editable_inputs.removeClass('editable').prop('disabled', true);;
    }


    function userSearch(options){

        ajax_api.ajax(options).then(function(response){
            $user_search_result.empty();
            response.forEach(function(user, index){
                let full_name = user.first_name + " " +  user.last_name;
                $('<li>').data('user-id', user.id).data('user-name', full_name).html(full_name + " [" + user.username + "]").
                on('click', function(event){
                    event.stopPropagation();
                    let user_id = $(this).data('user-id');
                    let user_name = $(this).data('user-name');
                    //$user_search_target.val(user_id);
                    user_search_target.value = user_id;
                    user_search_target.dispatchEvent(new Event('change', {'bubbles':true}));
                    //$(".js-user-search").val(user_name);
                    $user_search_target_name.val(user_name);
                    $user_search_result.hide();
                    $user_search_result.empty();
                }).appendTo($user_search_result);
                $user_search_result.show();
            });
    
        }, function(error){
            console.log(error);
        });
    }

    function seller_subscription_fetch(){

        seller = document.querySelector('#seller');
        subscription_title = document.querySelector('#subscription_title');
        csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        let subscription = document.querySelector('#subscription');
        if(!seller || !seller.value || subscription == null){
            return;
        }
        subscription_options.data.seller = seller.value;
        subscription_options.data.csrfmiddlewaretoken = csrfmiddlewaretoken.value;
        ajax_api.ajax(subscription_options).then(function(response){
            if(!response.succeed){
                return;
            }
            subscription.value = response.subscription;
            subscription.checked = true;
            let subscription_label = document.querySelector('#subscription-label');
            subscription_label.innerHTML = response.name;
            subscription_title.value = response.name;
        }, function(error){
            console.log(error);
        });
    }

    function init(){
        $user_search_result = $('#user-search-result');
        $user_search_target = $($user_search_result.data('target'));
        user_search_target = document.querySelector($user_search_result.data('target'));
        $user_search_target_name = $($user_search_result.data('target-name'));
        subscription_seller = document.querySelector('.js-subscription-seller');
        let $editable_inputs = $('input.js-editable');
        $editable_inputs.removeClass('editable').prop('disabled', true);;
        $('#form-controls').hide();
        $('.js-edit-form').on('click', function(event){
            let ctx = $($(this).data('target'));
            $(this).addClass('disabled');
            activate_editable_inputs(ctx);
            $('#form-controls').show();
        });
    
        $('.js-form-edit-cancel').on('click', function(event){
            event.preventDefault();
            let ctx = $($(this).data('target'));
            let hide_el = $($(this).data('hide'));
            hide_el.hide();
            $('.js-edit-form').removeClass('disabled');
            deactivate_editable_inputs(ctx);
        });
        
        if(subscription_seller){
            subscription_seller.addEventListener('change', seller_subscription_fetch);
        }
        
        $('.js-user-search').on('keyup', function(event){
            event.stopPropagation();
            query = $(this).val().trim();
            if(query.length == 0 ){
                return;
            }
            search_options.data.search = query
            if(scheduled_query){
                clearTimeout(scheduled_query);
            }
            scheduled_query = setTimeout(userSearch, query_delay, search_options);
        });
        
    }

    function get_user(){
        return user;
    }

    function get_username(){
            
        return user_available ?  user.username : "";
    }

    function get_last_login(){
        return user_available ?  user.last_login : "";
    }
    return {
        init : init,
        set_callback : function (func) {
            callback = func;
        },
        get_user : get_user,
        get_username : get_username,
        get_last_login : get_last_login,

        get_user_id : function(){
            return user_available ?  user.user_id : -1;
        },
        is_initialised : function(){
            return user_available;
        }
    }
    
});



define('cart_lyshop',['ajax_api'], function(ajax_api) {
    'use strict';
    const WHATSAPP_BTN_SELECTOR = "whatsapp-order-btn";
    //accounts.init();
    let user = {};
    let customer = - 1;
    // accounts.set_callback(function(obj){
    //     user = obj;
    //     customer = user.user_id;
    // });


    function on_variant_selected(variant){
        let whastapp_order_btn = document.getElementById(WHATSAPP_BTN_SELECTOR);
        if(!whastapp_order_btn){
            console.warn("Variant selected, but no Whatsapp Button was found.");
            return;
        }
        let csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]')
        if(!csrfmiddlewaretoken){
            console.warn("Variant selected, but no csrf token was found.");
            return;
        }
        let data = {
            "csrfmiddlewaretoken"   : csrfmiddlewaretoken.value,
            "variant" : variant
        };
        let option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/create-order-message/',
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            if(!response.success){
                notify({level:'error', content:response.error});
                return;
            }
            whastapp_order_btn.href = whastapp_order_btn.dataset.root_url + response.message;
            whastapp_order_btn.classList.remove('disabled');
            
        }, function(reason){
            console.error(reason);
        });
    }

    function Cart(){
        this.user = "";
        this.items = [];
        this.total = 0;
        this.customer = {};
        this.csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        this.cart_container = null;
        this.add_to_cart_form = null;
    }

    Cart.prototype.init = function(){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warn("no csrf_token found");
            return;
        }
        this.cart_container = document.getElementById('cart');
        this.add_to_cart_form = document.getElementById('add-cart-form');
        if(!(this.cart == null || this.add_to_cart_form == null)){
            return;
        }
        var self = this;
        this.customer = document.querySelector('#cart-customer');
        if(this.customer){
            customer = this.customer.value;
        }
        $('.js-cart-update-item-quantity,.js-cart-delete-item').on('click', function(){
            var item = $(this);
            var obj = {};
            obj['action'] = item.data('action');
            obj['target'] = $('#' + item.data('target'));
            obj['update'] = $('#' + item.data('update'));
            obj['parent'] = $('#' + item.data('parent'));
            obj['cart_total'] = $('.js-cart-total');
            obj['cart_quantity'] = $('.js-cart-quantity');
            obj['item_uuid'] = item.data('item');
            self.update_product(obj);
        });
        $('.js-add-to-cart,.js-buy-on-whastapp').on('click', function(event){
            let variant_input = document.querySelector("input:checked[name='variant_uuid']")
            var is_valid = variant_input != null && variant_input.value.length > 0;
            $('.js-selection-required').toggleClass('hidden', is_valid);
            if(is_valid){
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            $('.attr-selection-header').click();
        });

        $('#add-cart-form').submit(function(event){
            event.stopPropagation();
            event.preventDefault();
            let variant_input = document.querySelector("input:checked[name='variant_uuid']")
            var is_valid = variant_input != null && variant_input.value.length > 0;
            $('.js-selection-required').toggleClass('hidden', is_valid);
            if(is_valid){
                self.add($(this).serialize(), $('#product-name', this).val());
            }
        });
        $('.js-cart-item-quantity').on('keypress', function(e){
            if(e.which != 13){
                return;
            }
            var item = $(this);
            self.update_product_quantity(item.data('item'), item.val(), item);
        });
        $('.js-cart-clear').on('click', function(event){
            event.preventDefault();
            event.stopPropagation();
            self.clear();
        });
        let selected_option_element = document.querySelector('.js-selected-option');
        let has_selected = false;
        $('input.variant-attr').on('change', function(event){
            event.preventDefault();
            let checked_status = this.checked;
            $('input.variant-attr').not(this).prop('checked', false);
            $('.js-selection-required').toggleClass('hidden', true);
            if (checked_status && this.name != "notsent") {
                has_selected = true;
                
                if(selected_option_element){
                    selected_option_element.innerHTML = this.dataset.value;
                }
                //on_variant_selected(this.value);
             }
         });
        $('.js-add-coupon').on('click', self.addCoupon.bind(this));
        $(".js-remove-coupon").on('click', self.removeCoupon);
    }

    Cart.prototype.set_user = function(obj){
        user = obj;
        customer = user.user_id;
    }

    Cart.prototype.add = function(formData, product_name){
        var self = this;
        if(!formData){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/add-to-cart/',
            data : formData
        }
        
        ajax_api.ajax(option).then(function(response){
            self.update_badge(response.quantity);
            notify({level:response.success? 'info': 'error', content: response.message});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:response.message});
        });
    }

    Cart.prototype.remove = function(product){
        var self = this;
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warning("Cart add oporation not allowed: csrf_token missing");
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/cart/ajax_cart_item_delete/' + product.product_uuid + '/',
            data : {'csrfmiddlewaretoken': this.csrfmiddlewaretoken.value, 'item_uuid': product.product_uuid}
        }
        ajax_api.ajax(option).then(function(response){
            self.update_badge(response.quantity);
            notify({level:response.success? 'info': 'error', content: response.error});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be removed'});
        });
    }

    Cart.prototype.putInWishlist = function(product_uuid){
        var self = this;
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warning("csrf_token missing");
            return;
        }
    }

    Cart.prototype.clear = function(){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            console.warning("csrf_token missing");
            return;
        }
        var self = this;
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/clear-cart/',
            data : {'csrfmiddlewaretoken': this.csrfmiddlewaretoken.value}
        }
        ajax_api.ajax(option).then(function(response){
            notify({level:response.success? 'info': 'error', content: response.message});
            let local_order_message = document.querySelector('.offline-order');
            if(local_order_message){
                local_order_message.href = "#";
                local_order_message.disabled = true;
            }
            document.location.reload();
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'your cart could not be cleared'});
        });
    }

    Cart.prototype.addCoupon = function(){
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]').val();
        var coupon = $('#coupon').val();
        if(coupon.length == 0 || csrfmiddlewaretoken.length == 0){
            console.error("invalid coupon");
            return;
        }
        this.isValidCoupon(coupon, function(response){
            $("#coupon-error").toggle(!response.valid);
            if(response.status && response.valid){
                
                var option = {
                    type:'POST',
                    method: 'POST',
                    dataType: 'json',
                    url : '/api/add-to-coupon/',
                    data : {coupon : coupon, csrfmiddlewaretoken : csrfmiddlewaretoken}
                }
                ajax_api.ajax(option).then(function(response){
                    if(response.added){
                        $(".original-price").text(response.subtotal);
                        $(".final-price").text(response.total);
                        $(".js-cart-reduction").text(response.reduction);
                        $(".js-add-coupon").hide().siblings(".js-remove-coupon").show();
                        $("#coupon").prop('disabled', true).toggleClass('disabled');
                        let local_order_message = document.querySelector('.offline-order');
                        if(local_order_message){
                            local_order_message.href = local_order_message.dataset.url + response.local_order_message;
                        }
                        notify({level:'info', content:'coupon added'});
                    }else{
                        notify({level:'info', content:'coupon could not be added'});
                    }
                    
                }, function(reason){
                    notify({level:'info', content:'coupon could not be added'});
                    console.error("Error on adding Coupon \"%s\" to user cart", coupon);
                    console.error(reason);
                });
            }else if(response.status && !response.valid){
                setTimeout(()=>{
                    $("#coupon-error").fadeOut(600);
                }, 5000);
                console.log("invalid coupon : %s", coupon);
            }
            
        });
    }
    

    Cart.prototype.removeCoupon = function(){
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]').val();
        if(!csrfmiddlewaretoken){
            console.warning("Cart remove oporation not allowed: csrf_token missing");
            return;
        }
        var coupon = $('#coupon');
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/remove-coupon/',
            data : {coupon: coupon.val(), csrfmiddlewaretoken : csrfmiddlewaretoken}
        }
        ajax_api.ajax(option).then(
            function(response){
                var data = response;
                if(response.removed){
                    coupon.prop('disabled', false).removeClass('disabled', false).val('');
                    $(".original-price").text(response.subtotal);
                    $(".final-price").text(response.total);
                    $(".js-cart-reduction").text(response.reduction);
                    $(".js-add-coupon").show().siblings(".js-remove-coupon").hide();
                    let local_order_message = document.querySelector('.offline-order');
                    if(local_order_message){
                        local_order_message.href = local_order_message.dataset.url + response.local_order_message;
                    }
                    notify({level:'info', content:'coupon removed'});
                }else{
                    notify({level:'warn', content:'Coupon not removed'});
                }
                //document.location.reload();
            }, 
            function(error){
                notify({level:'warn', content:'error on checking the coupon'});
            });

    }

    Cart.prototype.isValidCoupon = function(coupon, callback){
        var csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]').val();
        if(!csrfmiddlewaretoken){
            console.warning("Cart add oporation not allowed: csrf_token missing");
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/api/verify-coupon/',
            data : {coupon : coupon, csrfmiddlewaretoken : csrfmiddlewaretoken}
        }
        ajax_api.ajax(option).then(
            function(response){
                if(typeof callback == "function"){
                    callback(response);
                }
            }, 
            function(error){
                if(typeof callback == "function"){
                    callback(error);
                }
            });
    }

    Cart.prototype.update_product = function(to_update){
        var self = this;
        var data = {
            "csrfmiddlewaretoken"   : this.csrfmiddlewaretoken.value,
            //"quantity"              : to_update['quantity'],
            "action"                :  to_update['action'],
            "item"                  : to_update['item_uuid'],
            "customer"              : customer
        };
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            //url : '/cart/ajax-cart-item/' + data['item'] + '/' + data['action'] + '/',
            url : '/api/update-cart-item/',
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            self.update_badge(response.count);
            if(!response.success){
                notify({level:'error', content:response.error});
                return;
            }
            if(response.count == 0){
                document.location.reload();
                return ;
            }
            if(response['removed']){
                to_update.parent.fadeOut('slow').remove()
            }else{
                to_update.target.val(response['item_quantity']);
                to_update.update.html(response['item_total']);
            }
            let local_order_message = document.querySelector('.offline-order');
            if(local_order_message){
                local_order_message.href = local_order_message.dataset.url + response.local_order_message;
            }
            $(".original-price").text(response.subtotal);
            $(".final-price").text(response.total);
            $(".js-cart-quantity").text(response.count);
            $(".js-cart-reduction").text(response.reduction);
            notify({level:'info', content:response.message});
            //to_update.cart_total.html(response['cart_total']);
            //to_update.cart_quantity.html(response['count']);            
            
        }, function(reason){
            console.error(reason);
        });
    }

    Cart.prototype.update_product_quantity = function(item_uuid, quantity, target){
        var data = {};
        data['csrfmiddlewaretoken'] = this.csrfmiddlewaretoken.value;
        data['quantity'] = quantity;
        data['action'] = 'update';
        data['item_uuid'] = item_uuid;
        data['customer'] = customer;
    
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/cart/ajax-cart-item-update/',
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            if(response['item_quantity'] == 0){
                $('#' + target.data('parent')).fadeOut('slow').remove();
            }else{
                target.val(response['item_quantity']);
                $('#' + target.data('total')).html(response['item_total']);
            }
    
            $(".original-price").text(response.subtotal);
            $(".final-price").text(response.total);
            $(".js-cart-quantity").text(response.count);
            $(".js-cart-reduction").text(response.reduction);
            this.update_badge(response.count);
            notify({level:'info', content:response.message});
            
            
        }, function(reason){
    
            console.error(reason);
            target.val(reason.responseJSON['item_quantity']);
            notify({level:'warn', content:response.message});
        });
    }

    Cart.prototype.update_badge = function(quantity){
        $('.cart .js-cart-count').text(quantity);
    }

    return Cart;
});
define('checkout',[
'ajax_api'
], function(ajax_api) {
    'use strict';
    let ADDRESS_FIELDS = [ 
            'user', 'city', 'firstname', 'lastname', 'country', 
            'postal_code','phone_number', 'address_extra', 'street',
            'house_number', 'is_active'
        ];

    let ADDRESS_FIELDS_REQUIRED = [ 
        'user', 'city', 'firstname', 'lastname', 'country', 
        'postal_code','phone_number', 'street'
 
    ];
    let LI_PO_PREFIX = '#p-option-';
    let LI_PM_PREFIX = '#p-method-';
    let INPOUT_PM_PREFIX = '#pm-';
    let PAYMENT_METHOD_CONTAINER = "#payment-method ul";
    let SHIP_STANDARD = 0;
    let SHIP_EXPRESS  = 1
    let SHIP_IN_STORE_GROUP = 2
    let SHIP_IN_STORE_POG = 3
    let SHIP_IN_STORE_LBV = 4
    let SHIPPING_ADDRESS_CONTAINER = "address-container";
    let api_address_url = '/api/create-address/';
    let SHIP_IN_HOUSE = [SHIP_STANDARD, SHIP_EXPRESS];
    let SHIP_IN_STORE = [SHIP_IN_STORE_GROUP, SHIP_IN_STORE_LBV, SHIP_IN_STORE_POG];
    let address = {
        id : "",
        name : "",
        email : "",
        city : "",
        postal_code: "",
        street : "",
        house_number : "",
        phone_number : "",
        country : ""
    };
    let step = {
        index : 1,
        valid : false,
        tab : null
    };
    let shipmode_tab = 1;
    let address_tab = 2;
    let payment_tab = 3;
    let verification_tab = 4;
    let confirmation_tab = 5
    let steps_order = [shipmode_tab, address_tab, payment_tab, verification_tab, confirmation_tab]
    let tabs = null;

    let PAY_AT_DELIVERY = 0;
    let PAY_AT_ORDER = 1;
    let PAY_WITH_PAY = 2;
    let PAY_BEFORE_DELIVERY = 3;

    let PAYMENT_OPTIONS = [PAY_AT_DELIVERY, PAY_AT_ORDER, PAY_WITH_PAY, PAY_BEFORE_DELIVERY];

    let ORDER_PAYMENT_CASH = 0;
    let ORDER_PAYMENT_LIPA = 1;
    let ORDER_PAYMENT_MOBILE = 2;

    let PAYMENT_METHODS = [ORDER_PAYMENT_CASH, ORDER_PAYMENT_MOBILE, ORDER_PAYMENT_LIPA];



    let PAYMENT_OPTION_METHODS_MAPPING = new Map();
    PAYMENT_OPTION_METHODS_MAPPING.set(PAY_AT_DELIVERY, [ORDER_PAYMENT_CASH]);
    PAYMENT_OPTION_METHODS_MAPPING.set(PAY_AT_ORDER, [ORDER_PAYMENT_LIPA, ORDER_PAYMENT_MOBILE]);
    PAYMENT_OPTION_METHODS_MAPPING.set(PAY_BEFORE_DELIVERY, [ORDER_PAYMENT_CASH, ORDER_PAYMENT_MOBILE, ORDER_PAYMENT_LIPA]);

    var Tabs = (function(){
        let tab_preffix = "step-header-";
        let tab_content_prefix = "step-";
        let checked_icon_class = "fas fa-check";
        let tab_title_class = "tab-title";
        let tab_title_checked = "tab-checked";
        let tab_contents = $('.tab-content');
        let tab_list = $('.tab');
        let current_index = 0;
        let tab_content_validators = [];
        let valid_tabs = [];
        let tabs_to_skips = [];
    
        function Tabs(){
            this.currentTab     = 0;
            this.tabCount       = 0;
            this.tabs           = {};
            this.tab            = {};
            this.tabsCount      = 0;
        };
    
        Tabs.prototype.init = function(){
            this.tabsCount = $(".tabs").length;
            this.tabs = $(".tab-content");
            this.tab = $(".tab");
            this.tabCount = this.tab.length;
            if(this.tabCount == 0){
                return;
            }
            let that = this;
            
            $('div.tab-container').each(function(){
                $(this).find('.tab-content:eq(0)').nextAll().hide();
            });
            //this.tabs.hide();
            $('div.tab-bar .tab').click(function(){
                let current = $(this);
                
                if(!current.hasClass('active')){
                    current.addClass('active').siblings().removeClass('active');
                    $(current.data('toggle')).show().siblings('div.tab-content').hide();
                }
            });
            $('.js-tab').on('click', function(){
                let tab_content = $($(this).data('toggle'));
                let tab_index = parseInt(tab_content.data('index'));
                $('.tab').eq(tab_index).addClass('active').siblings().removeClass('active');
                tab_content.show().siblings('.tab-content').hide();
            });
        };
    
        Tabs.prototype.add_validator = function(validator, index){
            if("function" == typeof validator){
                tab_content_validators[index] = validator;
            }
            
        };
    
        Tabs.prototype.toggle_checked = function(index, toggle){
            if(index < 0 || index > this.tabCount){
                return;
            }
            $('.' + tab_preffix + index + " .icon").toggleClass(checked_icon_class, toggle);
            $('.' + tab_preffix + index + " ." + tab_title_class).toggleClass(tab_title_checked, toggle);
            $('#' + tab_content_prefix + index + " .js-tab-next").toggleClass('disabled', !toggle);
            $('.js-send').prop('disabled', !toggle).toggleClass('disabled', !toggle);
            let index_included = valid_tabs.includes(index);
            if(toggle && !index_included ){
                valid_tabs.push(index);
            }else if(!toggle && index_included){
                valid_tabs.splice(index, 1);
            }
    
        };
        Tabs.prototype.onTabClicked = function(event){
            let tab = parseInt($(event.target).data("index"));
            if(tab != this.currentTab){
                this.currentTab = tab;
                    this.update();
            }
        };
        Tabs.prototype.update = function(){
            this.tab.removeClass("active");
            $(this.tab[this.currentTab]).addClass("active");
            let that = this;
            this.tabs.hide();
            $(this.tabs[this.currentTab]).show();
        };
        return Tabs;
    })();

    var Checkout = function(tabs_comp){
        tabs = tabs_comp || new Tabs();
        this.address = {};
        this.payment_option = -1;
        this.payment_method = -1;
        this.currentTab = 1;
        this.shipping_price = 0;
        this.items_count = 0;
        this.steps = [];
        this.current_step = {};
        this.address_required = true;
        this.address_available = false;
        this.ship_mode = -1;
        this.ship_mode_valid = false;
        this.payment_option_is_valid = false;
        this.payment_method_is_valid = false;
        this.address_is_valid = false;
        this.shipping_price = 0;
        this.sub_total = 0;
        this.total = 0;
        this.form_is_valid = false;
        this.form_selector = "checkout-form";
        this.form = null;
        
    };
    
    Checkout.prototype.init = function(){
        let self = this;
        this.form = document.getElementById(this.form_selector);
        if(!this.form){
            return;
        }
        let addr = document.getElementById('address');

        $('.js-input-payment-option').on('change', function(event){
            self.payment_option = this.value;
            self.payment_method = -1;
            self.payment_method_is_valid = false;
             tabs.toggle_checked(payment_tab, false);
            self.update_payment_method();
            self.validate_pament_options();
        });
        $('.js-input-payment-method').on('change', function(event){
            self.payment_method = $(this).data('mode');
            self.validate_pament_method();
        });
        $('.js-add-address').on('click', function(){
            $('#new-address, #checkout-address').toggleClass('hidden');
            
            if(addr){
                addr.toggleAttribute('disabled');
            }
            
        });
        $('.js-create-address').on('click', function(){
            self.create_address();
        });
        $('.js-input-ship-mode').on('change', function(event){
            self.ship_mode_changed(this);
        });
        //this.validate_address();
        self.update_payment_method();
        tabs.init();
        
        $('input.js-input-ship-mode').prop('checked', false);
        $('.js-send').prop('disabled', true);
        this.form.addEventListener('submit', function(event){
            event.stopPropagation();
            if(!self.is_form_valid()){
                event.preventDefault();
                return false;
            }
            return true;
        });

    };

    Checkout.prototype.update_send_btn = function(){
        $('.js-send').prop('disabled', !this.is_form_valid());
        $('.js-send').toggleClass('disabled', !this.is_form_valid());
    };

    Checkout.prototype.is_form_valid = function(){
        return this.ship_mode_valid && this.address_is_valid && this.payment_option_is_valid && this.payment_method_is_valid;
    };

    Checkout.prototype.validate_address = function(){
        let toggle = false;
        let address_input = $('#address').get();
        let inputs_container = $('#new-address').get();
        if(address_input){
            toggle = true;
            this.address_is_valid = true;
        }else if(inputs_container){
            let inputs = $("input", inputs_container);
            toggle = true;
            let i;
            for(i in inputs){
                if(i.value == ""){
                    toggle = false;
                    break;
                }
            }
        }
        this.address_is_valid = toggle;
        tabs.toggle_checked(address_tab, toggle);
        this.update_send_btn();
    };
    Checkout.prototype.validate_pament_options = function(){
       let is_valid = PAYMENT_OPTIONS.includes(parseInt(this.payment_option));
       if(!is_valid){
           console.log("Payment Option is invalid");
       }
       //tabs.toggle_checked(payment_tab, is_valid);
       this.payment_option_is_valid = is_valid;
       this.update_send_btn();

    };

    Checkout.prototype.validate_pament_method = function(){
       let methods = PAYMENT_OPTION_METHODS_MAPPING.get(parseInt(this.payment_option));
       let is_valid = methods && methods.includes(parseInt(this.payment_method));
       if(!is_valid){
           console.log("Payment Method is invalid");
       }
        tabs.toggle_checked(payment_tab, is_valid);
        this.payment_method_is_valid = is_valid;
        this.update_send_btn();
        return is_valid;
     };

    Checkout.prototype.create_address = function(){
        let self = this;
        let csrfmiddlewaretoken = $('input[name="csrfmiddlewaretoken"]');
        let container = $('#new-address');
        let address_inputs = $('input', container);
        let available_fields = [];
        let data = {
            'csrfmiddlewaretoken' : csrfmiddlewaretoken.val()
        };
        address_inputs.each(function(){
            if(this.value){
                available_fields.push(this.name);
            }
            data[this.name] = this.value;
        });
        let missing_fields = ADDRESS_FIELDS_REQUIRED.filter(field => !available_fields.includes(field));
        if(missing_fields.length > 0){
            missing_fields.forEach(field =>{
                $(`input[name="${field}"]`, container).addClass('warn');
            });
            return;
        }else{
            address_inputs.removeClass('warn');
        }
        let option = {
            type:'POST',
            dataType: 'json',
            url : api_address_url,
            data : data
        }
        let add_promise = ajax_api.ajax(option).then(function(response){
            if(response.status){
                address_inputs.each(function(){
                    this.disabled = 'disabled';
                });
                let input = $('<input>', {name : 'address', type :'hidden', value : response.id});
                input.appendTo(container);
                this.address_is_valid = true;
                tabs.toggle_checked(address_tab, true);
                $('.js-add-address, .js-create-address').addClass('disabled').prop('disabled', 'disabled');
                this.update_send_btn();
            }else{
                console.log("address not created. Error : %s", response.error);
            }
            
        }, function(reason){
            console.error(reason);
        });
    }

    Checkout.prototype.update_payment_method = function(){
        //this.payment_option = parseInt($('.js-input-payment-option').val());
        let methods = PAYMENT_OPTION_METHODS_MAPPING.get(parseInt(this.payment_option));
        let li_list = $(PAYMENT_METHOD_CONTAINER + " li");
        li_list.hide();
        $('input', li_list).each(function(){
            this.checked = false;
        });
        if(methods){
            methods.forEach(function(value, index){
                $(LI_PM_PREFIX + value, PAYMENT_METHOD_CONTAINER).show();
            });
        }
        this.update_send_btn();
        
    };
    Checkout.prototype.validate_shipmode = function(){
        let shipmde_container = $('#step-' + shipmode_tab);
        let $selectec_ship_mode = $('.js-input-ship-mode:checked')
        let $input = $("input[type='radio']:checked", shipmde_container);
        tabs.toggle_checked(shipmode_tab, is_valid);
        return is_valid;
    };

    Checkout.prototype.ship_mode_changed = function(el){
        this.ship_mode = parseInt($(el).data('mode'));
        this.ship_mode_valid = SHIP_IN_HOUSE.includes(this.ship_mode) || SHIP_IN_STORE.includes(this.ship_mode);
        //let shipping_price_el = $('.js-shipping-price');
        //let grand_total_el = $('.js-grand-total');
        //let total_el = $('.js-final-price');
        this.sub_total = parseInt($('.js-final-price').text());
        this.shipping_price = parseInt($(el).data('price'));
        //total += shipping_price;
        this.total = this.sub_total + this.shipping_price;
        $('.js-shipping-price').text(this.shipping_price);
        $('.js-grand-total').text(this.total);
        this.address_required = SHIP_IN_HOUSE.includes(this.ship_mode);
        $('.js-add-address').toggle(this.address_required);
        $('#address-container').toggle(this.address_required);
        $('.js-no-address-required').toggleClass('hidden', this.address_required);
        tabs.toggle_checked(shipmode_tab, true);
        this.validate_address();
        this.update_send_btn();
    };
    
    return Checkout;
    
});

define('wishlist',['ajax_api'], function(ajax_api) {
    'use strict';
    

    function Wishlist(){
        this.user = "";
        this.items = [];
        this.total = 0;
        this.csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
    }

    Wishlist.prototype.init = function(){
        var wishlist_dialog = document.getElementById('wishlist-dialog');
        if(!wishlist_dialog){
            return;
        }
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
        var self = this;

        $('.js-add-to-wishlist').on('click', function(){
            var item = $(this);
            
            var data = {
                'csrfmiddlewaretoken': self.csrfmiddlewaretoken.value,
                'wishlist_uuid' : item.data('list'),
                'product_uuid' : item.data('product')
            }
            self.add(data, item.data('name'));
        });
        $('.js-remove-from-list').on('click', function(){
            var item = $(this);
            
            var data = {
                'csrfmiddlewaretoken': self.csrfmiddlewaretoken.value,
                'wishlist_uuid' : item.data('list'),
                'product_uuid' : item.data('product')
            }
            self.remove(data, item.data('name'), item.data('target'));
        });
        $(".js-create-shop-list").on('click', function(){
            var item = $(this);
            var target = $('#' + item.data('target'));
            $('#wishlist-create-error', target).text('');
            $('#name', target).val('');
            item.parent().hide();
            target.show();
        });
        $(".js-close-box-wrapper").on('click', function(){
            var item = $(this);
            var target = $('#' + item.data('target'));
            var target_show = $('#' + item.data('show'));
            target.hide();
            $('#wishlist-create-error', target).text('');
            $('#name', target).val('');
            target_show.show();
        });

        $('#add-wishlist-form').on('submit', function(event){
            event.stopPropagation();
            event.preventDefault();
            self.create_and_add($(this).serialize());
        });
    }

    Wishlist.prototype.ui_update = function(){

    }

    Wishlist.prototype.rename = function(data, old_name){
        var self = this;
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            url : '/wishlist/wishlists/ajax-rename-wishlist/',
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            notify({level:'info', content: response.message});
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.create_and_add = function(data){
        var self = this;

        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            //url : '/wishlist/wishlists/ajax-create-add-wishlist/',
            url : '/api/create-and-add-wishlist/',
            data : data
        }
        var wishlist_dialog = $('#wishlist-dialog');
        var input_name = $('#name', wishlist_dialog);
        var error_hint = $('#wishlist-create-error', wishlist_dialog);

        ajax_api.ajax(option).then(function(response){
            notify({level:'info', content: response.message});
            input_name.val('');
            wishlist_dialog.hide();
            error_hint.text('');
        }, function(reason){
            error_hint.text(reason.responseJSON.message);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.add = function(data, product_name){
        var self = this;
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            //url : '/wishlist/wishlists/ajax-add-to-wishlist/',
            url : "/api/add-to-wishlist/" + data['wishlist_uuid'] +  "/",
            data : data
        }
        var wishlist_dialog = $('#wishlist-dialog');
        ajax_api.ajax(option).then(function(response){
            notify({level:'info', content: response.message});
            wishlist_dialog.hide();
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.remove = function(data, product_name, target){
        var self = this;
        var p_target = $('#' + target);
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            //url : '/wishlist/wishlists/ajax-remove-from-wishlist/',
            url : "/api/remove-from-wishlist/" + data['wishlist_uuid'] +  "/",
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            notify({level:'info', content: response.message});
            p_target.remove();
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'product could not be added'});
        });
    }

    Wishlist.prototype.moveToAnotherList = function(list_uuid, product_uuid){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
    }

    Wishlist.prototype.clear = function(){
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
        var self = this;
        var p_target = $('#' + target);
        if(!this.csrfmiddlewaretoken || !this.csrfmiddlewaretoken.value){
            return;
        }
        if(!data){
            return;
        }
        var option = {
            type:'POST',
            method: 'POST',
            dataType: 'json',
            //url : '/wishlist/wishlists/ajax-remove-from-wishlist/',
            url : "/api/clear-wishlist/" + data['wishlist_uuid'] +  "/",
            data : data
        }
        ajax_api.ajax(option).then(function(response){
            notify({level:'info', content: response.message});
            p_target.remove();
        }, function(reason){
            console.error(reason);
            notify({level:'warn', content:'wishlist could be cleared'});
        });
    }

    Wishlist.prototype.delete = function(data){

    }

    Wishlist.prototype.update_badge = function(quantity){
        $('.wishlists .badge').text(quantity);
    }

    return Wishlist;
});
define('scroll',[], function(){
    'use strict';
    let scrollLeft;
    let scrollRight;
    let windowsWidth;
    const SCROLL_BEHAVIOR = "smooth";
    const EASE = 0.05;
    var scroll_tools = {
        init : function(){
            let self = this;
            scrollLeft = document.querySelectorAll('.js-scroll-left');
            scrollRight = document.querySelectorAll('.js-scroll-right');
            let scrollables = document.querySelectorAll('.scroll');
            if(scrollables){
                scrollables.forEach(function(el, index, list){
                    if(el.scrollWidth <= el.clientWidth){
                        let scrollbar = el.parentElement.querySelector('.scroll-bar');
                        if(scrollbar){
                            scrollbar.style.display = 'none';
                        }
                    }
                });
            }
            if (scrollRight){
                scrollRight.forEach((element, index, list)=>{
                    element.addEventListener('click', (event)=>{
                        let scrollElement = element.parentElement.parentElement.querySelector('.scroll');
                        if(scrollElement.scrollWidth > scrollElement.clientWidth){
                            let item = scrollElement.children[0];
                            let visibleItems = scrollElement.clientWidth / item.clientWidth;
                            scrollElement.scroll({top:0, left: (scrollElement.scrollLeft + (item.clientWidth * visibleItems)), behavior:SCROLL_BEHAVIOR});
                        }
                    });
                });
            }
            if (scrollLeft){
                scrollLeft.forEach((element, index, list)=>{
                    element.addEventListener('click', (event)=>{
                        let scrollElement = element.parentElement.parentElement.querySelector('.scroll');
                        if(scrollElement.scrollWidth > scrollElement.clientWidth){
                            let item = scrollElement.children[0];
                            let visibleItems = scrollElement.clientWidth / item.clientWidth;
                            scrollElement.scroll({top:0, left: (scrollElement.scrollLeft - (item.clientWidth * visibleItems)), behavior:SCROLL_BEHAVIOR});
                        }
                    });
                });
            }
        },
        animate: function(){

        },

        setTransform : function(el, transform){
            el.style.transform = transform;
        },
        lerp : function(start, end, t){
            return start *(1-t) + end *t;
        }
    };
    return scroll_tools;
});
define('image_loader',[],function() {
    'use strict';

    var imageList = document.querySelectorAll('img[data-src]');
    const loadImages = (image) =>{
        image.setAttribute('src', image.getAttribute('data-src'));
        image.onload = () =>{
            image.removeAttribute('data-src');
        }
    };
    if ('IntersectionObserver' in window){
        const observer = new IntersectionObserver((items, observer) =>{
            items.forEach((item) =>{
                if(item.isIntersecting){
                    loadImages(item.target);
                    observer.unobserve(item.target);
                }
            })
        });
        imageList.forEach((img) =>{
            observer.observe(img);
        });
    }else{
        imageList.forEach((img) => {
            loadImages(img);
        });
    }
});

define('tag_api',[], function() {
    'use strict';
    var element_factory = {
        create_tag : function(option){
            let element = document.createElement(option.element);
            if(!option.hasOwnProperty('options')){
                return element;
            }
            let options = option.options;
            for(const [key, value] of Object.entries(options)){
                if((key == 'cls') && value.length){
                    value.split(' ').forEach(cls =>{
                        element.classList.add(cls);
                    });
                }else if(key == 'children'){
                    value.forEach(child =>{
                        element.appendChild(child);
                    });
                    
                }else if(key == 'child'){
                    element.appendChild(value);
                }else if(key.startsWith('data-')){
                    element.setAttribute(key, value);
                }else{
                    element[key] = value;
                }
            }
            return element;
        }
    };
    return element_factory;
    
});

define('filters',['tag_api'],function(tag_api) {
    'use strict';
    let filter_instance;

    function clean_form_before_submit(form){
        let filter_inputs = $('.filter-input', form);
        filter_inputs.each(function(){
            this.disabled = this.value == "";
        });
        $('.no-submit', form).each(function(){
            this.disabled = true;
        });
        let valid_inputs = filter_inputs.filter(function(){
            return this.value != "";
        });
        return valid_inputs.length == 0;
    }
    
    function filter_singular_init(field_id, chips_class){
        let input = document.getElementById(field_id);
        if(!input){
            return;
        }
        let selected_chips = document.querySelectorAll(chips_class);
        let values = ""
        selected_chips.forEach(function(element, index){
            if(index < selected_chips.length - 1){
                values += element.dataset.value + ",";
            }else{
                values += element.dataset.value;
            }
        });
        input.value = values;
    }
    
    function initialize_filters(){
        filter_singular_init('order-status-input', '.order-status-chips.chips-selected');
        filter_singular_init('order-payment-option-input', '.order-payment-option-chips.chips-selected');
    }
    
    
    function integer_field_filter(element){
        let values = "";
        let input_target = document.getElementById(element.dataset.target);
        if(!input_target){
            return;
        }
        let filter_type = element.dataset.type;
        let container = document.getElementById(input_target.dataset.container);
        if (filter_type == "selection"){
            element.classList.toggle('chips-selected', !element.classList.contains('chips-selected'));
            let selected_chips = container.querySelectorAll('.chips-selected');
            selected_chips.forEach(function(el, index){
                if(index < selected_chips.length - 1){
                    values += el.dataset.value + ",";
                }else{
                    values += el.dataset.value;
                }
            });
        }else if(filter_type == "range-start" || filter_type == "range-end"){
            let start="";
            let end="";
            if(filter_type == 'range-start'){
                start = element.value;
                end = document.getElementById(element.dataset.rangeNext).value;
            }else if(filter_type == 'range-end'){
                end = element.value;
                start = document.getElementById(element.dataset.rangeNext).value;
            }
            if(start.length || end.length){
                values = start + '-' + end;
            }
    
        }else if (filter_type == "value"){
            values = element.value;
        }
        input_target.value = values;
    
    }
    
    function install_integer_filter(){
        $('.js-list-filter').on('click', function(){
            integer_field_filter(this);
        });
        $('.js-range-filter,.js-value-filter').on('keyup change', function(){
            integer_field_filter(this);
        });
    }
    var ListFilter = (function(){
        function ListFilter(){

        };

        ListFilter.prototype.init = function(){
            let self = this;
            $('.js-filter-btn').on('click', function(event){
                var ctx = $('#' + this.dataset.context);
                var input_name = this.dataset['input-name'];
                var container = $('#' + this.dataset.container);
                var filter_field = this.dataset["filter-field"];
                var value_list = [];
                $("input:checked[name=\"" + input_name + "\"]", ctx).each(function(){
                    value_list.push(this.dataset.value);
                });
                self.filter(container, filter_field, value_list);
            });
        
            $('.js-filter-reset-btn').on('click', function(event){
                var ctx = $('#' + this.dataset.context);
                var container = $('#' + this.dataset.container);
                self.reset_filter(ctx, container);
            });
        };

        ListFilter.prototype.filter = function(ctx, filter_field, value_list){
            if(!ctx || !filter_field || !value_list || value_list.length == 0){
                console.log("Filter called with missing argumtent");
                return;
            }
            $(".filterable", ctx).each(function(index, element){
                let filter_value = this.dataset[filter_field];
                $(this).toggle(value_list.includes(filter_value));
            });
        };

        ListFilter.prototype.reset_filter = function(ctx, container){
            if(!ctx || !container){
                console.log(" Reset Filter called with missing context");
                return;
            }
            $("input:checkbox", ctx).each(function(){
                this.checked = false;
            });
            $(".filterable", container).each(function(index, element){
                $(this).show();
            });
        };

        return ListFilter;
    })();
    let list_filter = {
        init : function(){
            $('.js-list-filter').on('keyup', function(event){
                event.stopPropagation();
                let input = event.target;
                let value = input.value.trim().toLowerCase();
                let fields = input.dataset.fields.split(' ');
                let target = document.getElementById(input.dataset.target);
                let node;
                let collection = target.children;
                let included = false;
                for(let index = 0; index < collection.length; index++){
                    node = collection[index];
                    for(let f of fields){
                        included = node.dataset[f].toLowerCase().includes(value);
                        if(included) break;
                    }
                    node.classList.toggle('hidden', !included); 
                }
            });
            filter_instance = new ListFilter();
            filter_instance.init();
            let filter_form = $('#filter-form');
            initialize_filters();
            install_integer_filter();
            filter_form.on('submit', function(event){
                $('input[name="csrfmiddlewaretoken"]').prop('disabled', true);
                let reload = clean_form_before_submit(this);
                if(reload){
                    event.stopPropagation();
                    event.preventDefault();
                    window.location.search = "";
                    window.location = location.pathname;
                }
            });
            $('.js-pagination').on('click', function(event){
                
                if(filter_form.length != 0){
                    event.preventDefault();
                    event.stopPropagation();
                    
                    let page = $(event.target).data('page');
                    let input = tag_api.create_tag({'element': 'input', 'options': {'cls': 'filter-input', 'name': 'page', 'value': page,'type':'text','id':'page'}});
                    filter_form.append(input)
                    filter_form.submit();
                }
            });
        }
    };
    return list_filter;
});
define('core',['ajax_api', 'filters'], 
function(ajax_api, Filter) {
    'use strict';
    let messages;
    let notification_wrapper;
    let fadeDelay = 5000; // 5s
    var CAROUSEL_INTERVAL = 5000;
    const MIN_LEN_WARNING = 20;
    const MAX_COMMENT_TEXT_LEN = 256;
    const MAX_MAIL_TEXT_LEN = 512;
    const LOGIN_REQUIRED_KEY = "login_required";
    const UI_TOGGLE_OPEN_CSS = "fa-bars";
    const UI_TOGGLE_CLOSE_CSS = "fa-times";

    function notify(message){
        if( typeof notification_wrapper === 'undefined' || typeof messages === 'undefined'){
            console.warn("Notify call for message %s. But There is no messages container", message);
            return;
        }
        let li = $('<li />', {
            "class" : message.level,
        });
        let div = $('<div />', {
            "class" : "notification flex"
        });
        div.append($('<i />', {
            "class" : "fas fa-info-circle icon"
        })).append($('<span />', {
            'text': message.content
        })).appendTo(li);
        li.appendTo(messages);
        notification_wrapper.fadeIn().delay(fadeDelay).fadeOut('slow', function () {
            messages.empty();
        });
    }

    function notify_init(wrapper, message_container){
    
        if(typeof wrapper === 'undefined'){
            return;
        }

        if(typeof message_container === 'undefined' || $('li', message_container).length == 0){
            return;
        }

        wrapper.fadeIn().delay(fadeDelay).fadeOut('slow', function () {
            message_container.empty();
        });
    }
    /*
    var Carousel = (function(){
        function Carousel(){
            
    
        }
    
        Carousel.prototype.init = function(){
            var self = this;
            this.timer = null;
            this.carousel = document.querySelector('.carousel');
            
            if(!this.carousel){
                return;
            }
            this.items = document.querySelector('.carousel-items');
            this.dots_wrapper = document.querySelector('.carousel-dots-wrapper');
            this.dots = document.querySelectorAll('.dot');
            this.next = document.querySelector('.carousel-control.next');
            this.prev = document.querySelector('.carousel-control.prev');
            this.total = this.items.children.length -1;
            this.active = 'active';
            this.current = 0;
            if(this.next){
                this.next.classList.toggle('hidden', !(this.total > 1));
            }
            if(this.prev){
                this.prev.classList.toggle('hidden', !(this.total > 1));
            }
            if(this.dots_wrapper){
                this.dots_wrapper.classList.toggle('hidden', !(this.total > 1));
            }
            
            if(this.total  > 1){
                this.prev.addEventListener('click', this.onPreviousClicked.bind(this));
                this.next.addEventListener('click', this.onNextClicked.bind(this));
                this.timer = setInterval(this.scrollNext.bind(this), CAROUSEL_INTERVAL);
            }
            
        }
    
    
        Carousel.prototype.setActivedot = function(){
            var self = this;
            this.dots.forEach((dot, i) => {
                i == self.current ? dot.classList.add(self.active): dot.classList.remove(self.active)
            });
        }
    
        Carousel.prototype.scrollToCurrent = function(){
            var self = this;
            this.items.style.transform = `translateX(${this.current * -100}%)`;
            this.setActivedot();
        }
    
        Carousel.prototype.scrollPrev = function(){
            if(this.current === 0){
                this.current = this.total +1;
            }
            this.current--;
            this.scrollToCurrent();
        }
    
        Carousel.prototype.scrollNext = function(){
            if(this.current === this.total){
                this.current = -1;
            }
            this.current++;
            this.scrollToCurrent();
            
        }
    
        Carousel.prototype.resetTimer = function(){
            clearInterval(this.timer);
            this.timer = setInterval(this.scrollNext.bind(this), CAROUSEL_INTERVAL);
        }
    
        Carousel.prototype.onNextClicked = function(){
            this.scrollNext();
            this.resetTimer();
        }
    
        Carousel.prototype.onPreviousClicked = function(){
            this.scrollPrev();
            this.resetTimer();
        }
    
        return Carousel;
    })();
    */
    var Collapsible = (function(){
        function Collapsible(){
            this.$collapsible   = {}; // all element with collapsible class
            this.$close         = {}; // all button used to close a collapsible elements.
            this.init();
    
        }
        Collapsible.prototype.init = function(){
            this.$collapsible = $(".collapsible");
            let filter_content = $('#filter-content');
            let content_fitler = document.getElementById('filter-content');
            if(this.$collapsible.length == 0){
                return;
            }
            /*
            $('.collapsible').on('click', '.collapse-toggle', function(event){
                event.stopPropagation();
                $('.js-attr-opt').toggleClass('hidden');
                let content  = $('#' + $(this).data('target'));
                if(content.eq(filter_content)|| content.parent().eq(filter_content)){
                    $('.collapsible .collapse-content', filter_content).not(content).hide();
                }else{
                    $('.collapsible .collapse-content').not(content).hide();
                }
                content.toggle();
            });
            */
            $('.collapsible').on('click', '.collapse-toggle', function(event){
                event.stopPropagation();
                $('.js-attr-opt').toggleClass('hidden');
                let target  = document.getElementById(this.dataset.target);
                let display = target.style.display || 'none';
                if(!target) return;
                if(target == content_fitler || target.parentElement == content_fitler){
                    content_fitler.querySelectorAll('.collapse-content').forEach((el)=>{
                        el.classList.toggle('hidden', el != target);
                    });
                }else{
                    document.querySelectorAll('.collapse-content').forEach((el)=>{
                        el.classList.toggle('hidden', el != target);
                    });
                }
                /*
                if(display != "none"){
                    target.style.display = 'none';
                    target.parentElement.classList.add('activated');
                }else{
                    target.style.display = 'block';
                    target.parentElement.classList.remove('activated');
                }*/
                target.style.display = display == 'none' ? 'block': 'none';
                this.parentElement.classList.toggle('activated', display == 'none');
                
                //$('input.clearable', content).val('');
            });
            $('.collapsible .toggle').on('click', function(event){
                event.stopPropagation();
                let parent = $(this).parent();
                let target = $('.' + this.dataset.toggle, parent);
                $('input', parent).val('');
                
                target.toggle();
            });
            $(this.$collapsible).on("click", ".open", function(event){
                event.stopPropagation();
                let target =$(event.target).data("target");
                if(target == undefined){
                    $(this).parent().children(".collapse-content").toggle();
                }
                else{
                    $(target).toggle();
                }
            });
    
            $(this.$collapsible).on("click", ".close", function(event){
                event.stopPropagation();
                let target =$(event.target).data("target");
    
                if(target == undefined){
                    $(this).parent().toggle();
                }
                else{
                    $(target).toggle();
                }
            });
        };
    
        return Collapsible;
    })();
    
    
    var Modal = (function(){
        function Modal(options){
            this.modal = {};
            this.init();
        }
        Modal.prototype.init = function(){
            let that = this;
            function clear_inputs_field(inputs) {
                if(!inputs || inputs-length == 0){
                    return;
                }
                Array.from(inputs).filter(input => { return ("clearable" in input.dataset === false) || (input.dataset.clearable === "true"); })
                    .forEach(function (el, index) {
                        el.value = "";
                        el.dataset.update = "";
                        if (el.type == "file") {
                            el.files = null;
                        }
                        if (el.type == "checkbox" || el.type == "radio") {
                            el.checked = false;
                        }
                    });
            }

            $(".js-open-modal").click(function(event){
                if((LOGIN_REQUIRED_KEY in this.dataset) && this.dataset[LOGIN_REQUIRED_KEY] == "1" ){
                    event.stopPropagation();
                    event.preventDefault();
                    notify({"level": "info", "content": this.dataset.message});
                    return false;
                }
                let modal = document.getElementById(this.dataset.target);
                that.modal = modal;
                
                modal.style.display = "flex";
                if(window){
                    $(window).click(function(eventModal){
                        if(eventModal.target == modal){
                            modal.style.display = "none";
                            that.modal = undefined;
                            let inputs = modal.querySelectorAll("input:not([name='csrfmiddlewaretoken']):not([type='hidden']), textarea");
                            let clearables = modal.querySelectorAll('.clearable');
                            if(clearables){
                                clearables.forEach((el) =>{
                                    el.innerText = "";
                                    el.classList.remove('warning', 'danger');
                                });
                            }
                            clear_inputs_field(inputs);
                        }

                        
                    });
                }
            });
    
            $(".js-close-modal").click(function(event){
                event.stopPropagation();
                let modal = document.getElementById(this.dataset.target);
                modal.style.display = "none";
                that.modal = undefined;
                let inputs = modal.querySelectorAll("input:not([name='csrfmiddlewaretoken']):not([type='hidden']), textarea");
                let clearables = modal.querySelectorAll('.clearable');
                if(clearables){
                    clearables.forEach((el) =>{
                        el.innerText = "";
                        el.classList.remove('warning', 'danger');
                    });
                }
                clear_inputs_field(inputs);
            });
        }
        return Modal;
    })();
    function autoplayCarousel() {
        const carouselEl = document.getElementById("carousel");
        if(!carouselEl){
            return;
        }
        const slideContainerEl = carouselEl.querySelector("#slide-container");
        const slideEl = carouselEl.querySelector(".slide");
        
        let slideWidth = slideEl.offsetWidth;
    
        document.querySelectorAll(".slide-indicator")
            .forEach((dot, index) => {
                dot.addEventListener("click", () => navigate(index));
                dot.addEventListener("mouseenter", () => clearInterval(autoplay));
            });
        // Add keyboard handlers
        document.addEventListener('keydown', (e) => {
            if (e.code === 'ArrowLeft') {
                clearInterval(autoplay);
                navigate("backward");
            } else if (e.code === 'ArrowRight') {
                clearInterval(autoplay);
                navigate("forward");
            }
        });
        // Add resize handler
        window.addEventListener('resize', () => {
            slideWidth = slideEl.offsetWidth;
        });
        // Autoplay
        let autoplay = setInterval(() => navigate("forward"), CAROUSEL_INTERVAL);
        slideContainerEl.addEventListener("mouseenter", () => clearInterval(autoplay));
        slideContainerEl.addEventListener("mouseleave", () => {
            autoplay = setInterval(() => navigate("forward"), CAROUSEL_INTERVAL);
        });
        // Slide transition
        const getNewScrollPosition = (arg) => {
            const gap = 10;
            const maxScrollLeft = slideContainerEl.scrollWidth - slideWidth;
            if (arg === "forward") {
                const x = slideContainerEl.scrollLeft + slideWidth + gap;
                return x <= maxScrollLeft ? x : 0;
            } else if (arg === "backward") {
                const x = slideContainerEl.scrollLeft - slideWidth - gap;
                return x >= 0 ? x : maxScrollLeft;
            } else if (typeof arg === "number") {
                const x = arg * (slideWidth + gap);
                return x;
            }
        }
        const navigate = (arg) => {
            slideContainerEl.scrollLeft = getNewScrollPosition(arg);
        }
        // Slide indicators
        const slideObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const slideIndex = entry.target.dataset.slideindex;
                    carouselEl.querySelector('.slide-indicator.active').classList.remove('active');
                    carouselEl.querySelectorAll('.slide-indicator')[slideIndex].classList.add('active');
                }
            });
        }, { root: slideContainerEl, threshold: .1 });
        let slides = document.querySelectorAll('.slide');
        if(!slides || slides.length <= 1){
            return;
        }
        slides.forEach((slide) => {
            slideObserver.observe(slide);
        });
    }
    function kiosk_update(event){
        document.getElementById('main-image').src = event.target.src;
        $(".kiosk-image").removeClass('active').filter(event.target).addClass("active");
    }
    async function track_action(track_element){
        let csrfmiddlewaretoken = document.querySelector('input[name="csrfmiddlewaretoken"]');
        let url = '/api/track-actions/';
        let action = parseInt(track_element.dataset.action);
        let options = {
            url : url,
            type: 'POST',
            data : {'action': action, 'csrfmiddlewaretoken': csrfmiddlewaretoken.value},
            dataType : 'json',
            cache : false,
        };
        ajax_api.ajax(options).then(function(response){}, function(error){});
    }
    autoplayCarousel();
    let modal = new Modal();
    let collapsible =  new Collapsible();
    function image_preview(){
        let previewer = document.getElementById('image-previewer');
        if(!previewer){
            return;
        }
        let images = previewer.querySelectorAll('.preview-image');
        if(!images){
            return;
        }
        let max_index = parseInt(previewer.dataset.count);
        let active_image = previewer.querySelector('#active-image');
        let prev_btn = previewer.querySelector('.prev');
        let close_btn = previewer.querySelector('.js-close-modal');
        let next_btn = previewer.querySelector('.next');
        let viewer_current_index = previewer.querySelector('.viewer-current-index');
        let current = parseInt(previewer.dataset.current);
        prev_btn.addEventListener('click', function(event){
            event.stopPropagation();
            current--;
            if(current >= 0){
                active_image.src = images[current].src;
                next_btn.classList.remove('disabled');
                previewer.dataset.current = current;
            }else{
                current = 0;
            }
            this.classList.toggle('disabled', current == 0);
            viewer_current_index.innerText = current + 1;
        });
        next_btn.addEventListener('click', function(event){
            event.stopPropagation();
            current++;
            if(current < max_index){
                active_image.src = images[current].src;
                prev_btn.classList.remove('disabled');
                previewer.dataset.current = current;
            }else{
                current = max_index;
            }
            this.classList.toggle('disabled', current >= (max_index - 1));
            viewer_current_index.innerText = current + 1;
        });
        close_btn.addEventListener('click', function(event){
            current = 0;
            active_image.src = images[current].src;
            next_btn.classList.remove('disabled');
            prev_btn.classList.add('disabled');
            previewer.dataset.current = current;
            viewer_current_index.innerText = current + 1;
        });
    }
    function input_check_max_limit2(input){
        let max_len = parseInt(input.dataset.maxLength);
        let len = input.value.length;
        let target = document.getElementById(input.dataset.target);
        if(target){
            target.innerText = len
            target.classList.toggle("danger", (max_len - len) <= 0);
            target.classList.toggle("warning", ((max_len - len) > 0 && (max_len - len) <= MIN_LEN_WARNING));
        }else{
            console.warn("input check max length failed : target for selector %s is null", input.dataset.target)
        }
        
    }

    function is_mail_form_valid(form){
        let inputs_selectors = [
            {'id':'customer_name', 'name':'customer_name','type': 'input', 'validator': null, valid:false, missing:false, required:true},
            {'id':'customer_email', 'name':'customer_email','type': 'input', 'validator': null, valid:false, missing:false, required:true},
            {'id':'subject', 'name':'subject','type': 'input', 'validator': null, valid:false, missing:false, required:true},
            {'id':'message', 'name':'message','type': 'textarea', 'validator': null, valid:false, missing:false, required:true},
        ];
    
        inputs_selectors.forEach(selector =>{
            let input = form.querySelector(`${selector.type}[name='${selector.name}']`);
            if(input == null){
                selector.missing = true;
            }else{
                selector.valid = selector.validator != null ? selector.validator(input.value) : input.value != "";
                input.classList.toggle('error', !selector.valid);
            }
        });
        let some_invalid = function(selector){
            return (selector.valid == false || selector.missing) && selector.required;
        }
        return !inputs_selectors.some(some_invalid);
    }
    
    function send_mail_listeners(){
        let form = document.getElementById('new-mail');
        let forms = document.querySelectorAll('.mail-form');
        if(forms.length == 0){
            return;
        }
        let on_success = function(response, close_target){
            if(response.success){
                let subject = document.getElementById('subject');
                let message = document.getElementById('message');
                let length_counter = document.getElementById('length-counter');
                
                subject.value = "";
                message.value = "";
                length_counter.value = "0";
                length_counter.classList.remove('danger');
                length_counter.classList.remove('warning');
                if(close_target && close_target != ''){
                    let close_modal_btn = document.getElementById(close_target);
                    close_modal_btn.dispatchEvent(new Event('click'));
                }
            }else{
                console.log(response);
            }
        }
        forms.forEach(function(form){
            form.addEventListener('submit', function(e){
                e.preventDefault();
                e.stopPropagation();
                if(!is_mail_form_valid(form)){
                    return false;
                }
                let close_target = form.dataset.close;
                let formData = new FormData(form);
                let url = form.dataset.url;
    
                let options = {
                    url : url,
                    type: 'POST',
                    enctype : 'multipart/form-data',
                    data: formData,
                    dataType : 'json',
                    processData : false,
                    cache : false,
                    contentType : false
                };
                ajax_api.ajax(options).then(function(response){
                    let msg = {
                        content : response.message,
                        level : response.success
                    }
                    notify(msg);
                    if(form.dataset.onsuccess == "1"){
                        on_success(response, close_target);
                    }
                    
                }, function(reason){
                    console.error("Mail could not be sent.");
                    console.error(reason);
                });
            });
        });
        
    }

    function update_rating(el){
        let current = el.dataset.index;
        let stars  = document.querySelectorAll('.js-star');
        stars.forEach(function(tag, index){
            tag.classList.toggle('selected', current >= index);
        });
    }

    function init_collapsible(){
        let toggle_list = document.querySelectorAll('.collapse-v2-toggle');
        if( toggle_list == 0){
            return;
        }
        toggle_list.forEach((t,i)=>{
            t.addEventListener('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                let activate = !this.classList.contains('active');
                /*
                toggle_list.forEach((e,i)=>{
                    e.classList.remove('active');
                    if(e.dataset.target){
                        let el = document.getElementById(e.dataset.target);
                        el.style.display = 'none';
                    }else{
                        if(e.parentElement.nextElementSibling){
                            e.parentElement.nextElementSibling.style.display = 'none';
                        }
                    }
                });*/
                this.classList.toggle('active', activate);
                if(this.dataset.target){
                    let el = document.getElementById(this.dataset.target);
                    if(el){
                        el.style.display = activate ? 'block': '';
                    }
                }else{
                    //this.parentElement.nextElementSibling.classList.toggle('hidden', !activate);
                    if(this.nextElementSibling){
                        this.nextElementSibling.style.display = activate ? 'block': '';
                    }
                    
                }
            });
        });
    }


    function init_accordion(){
        let toggle_list = document.querySelectorAll('.accordion-toggle');
        if( toggle_list == 0){
            return;
        }
        toggle_list.forEach((t,i)=>{
            t.addEventListener('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                let activate = !this.classList.contains('active');
                toggle_list.forEach((e,i)=>{
                    e.classList.remove('active');
                    if(e.dataset.target){
                        let el = document.getElementById(e.dataset.target);
                        el.style.display = 'none';
                    }else{
                        if(e.parentElement.nextElementSibling){
                            e.parentElement.nextElementSibling.style.display = 'none';
                        }
                    }
                });
                this.classList.toggle('active', activate);
                if(this.dataset.target){
                    let el = document.getElementById(this.dataset.target);
                    if(el){
                        el.style.display = activate ? 'block': '';
                    }
                }else{
                    //this.parentElement.nextElementSibling.classList.toggle('hidden', !activate);
                    if(this.parentElement.nextElementSibling){
                        this.parentElement.nextElementSibling.style.display = activate ? 'block': '';
                    }
                    
                }
            });
        });
    }

    function init_dropdown(){
        let toggle_list = document.querySelectorAll('.dropdown-toggle');
        if( !toggle_list){
            return;
        }
        

        toggle_list.forEach((t,i)=>{
            t.addEventListener('click', function(event){
                event.stopPropagation();
                event.preventDefault();
                toggle_list.forEach((e,i)=>{
                    if((e != t) && (e.dataset.target != t.dataset.target)){
                        if(e.dataset.target){
                            let el = document.getElementById(e.dataset.target);
                            if(el){
                                el.classList.remove('show');
                            }
                        }else{
                            if(e.nextElementSibling){
                                e.nextElementSibling.classList.remove('show');
                            }
                        }
                    }
                });
                if(this.dataset.target){
                    let el = document.getElementById(this.dataset.target);
                    if(el){
                        el.classList.toggle('show');
                    }
                }else{
                    if(this.nextElementSibling){
                        this.nextElementSibling.classList.toggle('show');
                    } 
                }
            });
        });
        
    }
    
    $(document).ready(function(){
        if(window){
            window.notify = notify;
        }
        init_accordion();
        init_dropdown();
        init_collapsible();
        send_mail_listeners();
        notification_wrapper = $('#notifications-wrapper');
        messages = $('#messages', notification_wrapper);
        notify_init(notification_wrapper, messages);
        Filter.init();
        image_preview();
        $('.js-star').on('click', function(event){update_rating(this)});
        $('.js-select-image').on('click', kiosk_update);
        $('.js-dialog-open').on('click', function(){
            let target = $('#' + this.dataset.target);
            target.show();
        });
        
        $('.js-dialog-close').on('click', function(){
            let target = $("#" + this.dataset.target);
            target.hide();
            //var parent = $(this).parents('.dialog').hide();
            $('input[type!="hidden"]', target).val('');
        });
        $('.js-reveal-btn, .js-revealable-hide').on('click', function(){
            let target = $(this.dataset.target).parent();
            $('.js-revealable', target).toggleClass('hidden');
        });
        $('.js-clear-input').on('click', function(){
            
            let target = $('#' + this.dataset.target);
            $('input[type!=checkbox]', target).val('');
            $('input:checkbox', target).val('').prop('checked', '');
        });
        let selectable_list = $(".js-selectable");
        let activable_list = $(".js-activable");
        let select_all = $('.js-select-all');
        selectable_list.on('click', function(){
            let is_selected = selectable_list.is(function (el) {
                return this.checked;
            });
            
            let selected_all = selectable_list.is(function (el) {
                return !this.checked;
            });
            select_all.prop('checked', !selected_all);
            activable_list.prop('disabled', !is_selected);
        });

        select_all.on('click', function(){
            selectable_list.prop('checked', this.checked);
            activable_list.prop('disabled', !this.checked);
        });
        $(".limited-input").on("keyup", function(event){
            event.stopPropagation();
            input_check_max_limit2(this);
        });

        $('.js-menu').on('click', function(){
            $('#menu-overlay-label').click();
            $('.js-menu-close').show();
            $(this).hide();

        });
        $('.js-menu-close').on('click', function(){

            $('#menu-overlay-label').click();
            $('.js-menu').show();
            $(this).hide();
        });
        $('.js-action-abtest').on('click', function(e){
            if(!this.dataset.action){
                return;
            }
            track_action(this);
        });
        let btn_toggle_list = document.querySelectorAll("button[data-ui-toggle='collapse']");
        btn_toggle_list.forEach((button)=>{
            if(!button.dataset.uiTarget){
                console.warn("found button with data-ui-toggle set but no target were defined", button);
                return;
            }
            button.addEventListener('click',(event)=>{
                let target = document.getElementById(button.dataset.uiTarget);
                target.classList.toggle('show');
                if(!button.dataset.custom){
                    let i = button.querySelector("i");
                    i.classList.toggle(UI_TOGGLE_OPEN_CSS);
                    i.classList.toggle(UI_TOGGLE_CLOSE_CSS);
                }
                
            });

        });
    });
});

requirejs.config({
    baseUrl :'/static/js/lib',
    paths:{
        vendor: '../vendors'
    },
    waitSeconds: 0
});

requirejs(['accounts','cart_lyshop', 'checkout','wishlist','scroll', 'image_loader', 'core'], function(account, Cart, Checkout, Wishlist, scroll_tools){
    account.init();
    let cart = new Cart();
    let wishlist = new Wishlist();
    cart.init();
    wishlist.init();
    let checkout = new Checkout();
    checkout.init();
    scroll_tools.init();
});
define("main", function(){});

